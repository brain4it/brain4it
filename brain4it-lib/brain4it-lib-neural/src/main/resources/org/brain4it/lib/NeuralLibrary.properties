
NeuralCreate.synopsis=Creates a neural network.
NeuralCreate.type=the type of the network. It can be "MultiLayerPerceptron", \
"Kohonen", "Hopfield", "Instar" or "Perceptron". \
When not specified, it is assumed that <type> is "MultiLayerPerceptron".
NeuralCreate.neurons=a list that contains the number of neurons of each \
layer of the network.
NeuralCreate.net_id=a unique identifier of the neural network.
NeuralCreate.description=Creates a neural network of the given <type> with \
the number of neurons specified in the <neurons> argument.

NeuralDestroy.synopsis=Destroys a neural network.
NeuralDestroy.net_id=the identifier of the neural network to destroy.
NeuralDestroy.destroyed=true if the network was found, false otherwise.
NeuralDestroy.description=Destroys the neural network identified by <net_id>.

NeuralLearn.synopsis=Trains a neural network.
NeuralLearn.net_id=the identifier of the neural network that is going to be \
trained.
NeuralLearn.dataset=a list that contains the samples to be learn by the \
network. Each sample is a list of 2 elements: \
an input vector and its corresponding output vector. The input vector is a \
list with as many numbers as input neurons has the network and the output \
vector is another list with as many numbers as output neurons has the network.
NeuralLearn.max_iterations=the maximum number of iterations of the learning \
process when the neural network has an iterative learning method.
NeuralLearn.max_error=the maximum error of the learning process \
when the neural network has a supervised learning method. By default, \
<max_error> is 0.01.
NeuralLearn.num_iterations=the number of iterations the learning process took.
NeuralLearn.description=Trains the network identified by <net_id> to learn the \
given <dataset>. Since the learning process may take a long time, a stop \
condition can be set with the <max_error> or <max_iterations> \
parameters.\n\
In all cases, the learning process can be interrupted by calling the <kill> \
function.

NeuralCalculate.synopsis=Calculates the output of a neural network for an input.
NeuralCalculate.net_id=the identifier of the neural network that \
is going to be calculated.
NeuralCalculate.input=the input vector that contains as many numbers as input \
neurons has the network.
NeuralCalculate.output=the output vector that contains as many numbers as \
output neurons has the network.
NeuralCalculate.description=Calculates the <output> vector that produces \
the neural network identified by <net_id> for the given <input> vector.

NeuralWeights.synopsis=Gets or sets the weights of a neural network.
NeuralWeights.net_id=the identifier of the neural network whose \
weights are going to be get or set.
NeuralWeights.new_weights=a list that contains the new weights of the network \
connections.
NeuralWeights.weights=a list that contains the current weights of the network \
connections.
NeuralWeights.description=When <new_weights> is specified this function \
replaces the current weights of the neuron connections by the values of \
<new_weights>. If <new_weights> is not specified, this function returns the \
current weights of the neuron connections. The number of weights depends on \
the configuration of the network. \n\
This function is used to save and restore the state of a neural network \
after it has been trained.
