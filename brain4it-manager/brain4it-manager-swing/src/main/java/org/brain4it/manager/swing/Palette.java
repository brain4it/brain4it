/*
 * Brain4it
 *
 * Copyright (C) 2018, Ajuntament de Sant Feliu de Llobregat
 *
 * This program is licensed and may be used, modified and redistributed under
 * the terms of the European Public License (EUPL), either version 1.1 or (at
 * your option) any later version as soon as they are approved by the European
 * Commission.
 *
 * Alternatively, you may redistribute and/or modify this program under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either  version 3 of the License, or (at your option)
 * any later version.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the licenses for the specific language governing permissions, limitations
 * and more details.
 *
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along
 * with this program; if not, you may find them at:
 *
 *   https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 *   http://www.gnu.org/licenses/
 *   and
 *   https://www.gnu.org/licenses/lgpl.txt
 */
package org.brain4it.manager.swing;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceAdapter;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.JLabel;
import org.brain4it.manager.swing.layout.WrapLayout;

/**
 *
 * @author realor
 */
public class Palette extends javax.swing.JPanel
{
  private WidgetTypeButton selectedButton;
  private GridLayout gridLayout;

  /**
   * Creates new form Palette
   */
  public Palette()
  {
    initComponents();
    initPalette();
  }

  public String getSelectedWidgetType()
  {
    if (selectedButton != null)
    {
      return selectedButton.getText();
    }
    return null;
  }

  public void clearSelectedWidgetType()
  {
    if (selectedButton != null)
    {
      selectedButton.setSelected(false);
      clearHover();
      widgetTypeButtonsPanel.repaint();
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    scrollPane = new javax.swing.JScrollPane();
    widgetTypeButtonsPanel = new javax.swing.JPanel();

    setLayout(new java.awt.BorderLayout());

    widgetTypeButtonsPanel.setLayout(new java.awt.BorderLayout());
    scrollPane.setViewportView(widgetTypeButtonsPanel);

    add(scrollPane, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

  private void initPalette()
  {
    widgetTypeButtonsPanel.setLayout(new WrapLayout(FlowLayout.LEFT));
    DashboardWidgetFactory factory = DashboardWidgetFactory.getInstance();
    ArrayList<String> widgetTypes = factory.getTypes();
    for (String typeName : widgetTypes)
    {
      WidgetTypeButton button = new WidgetTypeButton(typeName);
      widgetTypeButtonsPanel.add(button);
    }
  }
  
  private void clearHover()
  {
    int count = widgetTypeButtonsPanel.getComponentCount();
    for (int i = 0; i < count; i++)
    {
      WidgetTypeButton button = 
        (WidgetTypeButton)widgetTypeButtonsPanel.getComponent(i);
      button.hover = false;
    }
  }

  public class WidgetTypeButton extends JLabel 
   implements MouseListener, Transferable
  {
    private boolean hover;

    public WidgetTypeButton(String typeName)
    {
      super(typeName);
      initComponents();
    }
    
    @Override
    public Dimension getPreferredSize()
    {
      int scalingFactor = ManagerApp.getPreferences().getScalingFactor();
      Dimension size = super.getPreferredSize();
      return new Dimension(100 * scalingFactor, size.height);
    }
    
    private void initComponents()
    {
      this.addMouseListener(this);
      String typeName = getText();
      this.setIcon(IconCache.getIcon("widgets/" + typeName, "widgets/gauge"));

      DragSource dragSource = DragSource.getDefaultDragSource();
      dragSource.createDefaultDragGestureRecognizer(this,
        DnDConstants.ACTION_COPY, new DragGestureListener()
      {
        @Override
        public void dragGestureRecognized(DragGestureEvent event)
        {
          DragSourceListener dragListener = new DragSourceAdapter()
          {
            @Override
            public void dragDropEnd(DragSourceDropEvent event)
            {
              clearSelectedWidgetType();
            }
          };        
          event.startDrag(DragSource.DefaultCopyDrop,
            WidgetTypeButton.this, dragListener);
        }
      });      
    }

    public void setSelected(boolean selected)
    {
      if (selectedButton != null && selectedButton != this)
      {
        selectedButton.setSelected(false);
      }
      
      if (selected)
      {
        selectedButton = this;
      }
      else
      {
        selectedButton = null;
      }
      repaint();
    }

    public boolean isSelected()
    {
      return selectedButton == this;
    }

    @Override
    public void paintComponent(Graphics g)
    {
      super.paintComponent(g);
      Color shadowColor = getBackground().darker();
      if (isSelected())
      {
        g.setColor(shadowColor);
        g.drawLine(0, 0, getWidth() - 1, 0);
        g.drawLine(0, 0, 0, getHeight() - 1);

        g.setColor(Color.white);
        g.drawLine(0, getHeight() - 1, getWidth() - 1, getHeight() - 1);
        g.drawLine(getWidth() - 1, 0, getWidth() - 1, getHeight() - 1);
      }
      else if (hover)
      {
        g.setColor(Color.white);
        g.drawLine(0, 0, getWidth() - 1, 0);
        g.drawLine(0, 0, 0, getHeight() - 1);

        g.setColor(shadowColor);
        g.drawLine(0, getHeight() - 1, getWidth() - 1, getHeight() - 1);
        g.drawLine(getWidth() - 1, 0, getWidth() - 1, getHeight() - 1);
      }
    }

    /* Transferable interface */
    @Override
    public DataFlavor[] getTransferDataFlavors()
    {
      return new DataFlavor[]{DataFlavor.stringFlavor};
    }

    @Override
    public boolean isDataFlavorSupported(DataFlavor flavor)
    {
      return true;
    }

    @Override
    public Object getTransferData(DataFlavor flavor)
    {
      return getText();
    }

    /* MouseListener interface */
    @Override
    public void mouseClicked(MouseEvent e)
    {
    }

    @Override
    public void mousePressed(MouseEvent e)
    {
      setSelected(!isSelected());
    }

    @Override
    public void mouseReleased(MouseEvent e)
    {
    }

    @Override
    public void mouseEntered(MouseEvent e)
    {
      hover = true;
      repaint();
    }

    @Override
    public void mouseExited(MouseEvent e)
    {
      hover = false;
      repaint();
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane scrollPane;
  private javax.swing.JPanel widgetTypeButtonsPanel;
  // End of variables declaration//GEN-END:variables
}
