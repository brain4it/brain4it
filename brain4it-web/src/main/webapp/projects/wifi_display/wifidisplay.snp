("module-metadata" => ("icon" => "air_conditioning" "description" => "Desconnexió automàtica aire junta de govern") "access-key" => "8973" "setup" => ((### "contiene las variables globales que no cambian durante el proceso del módulo") "access_interval" => 30 (### "aquí se tiene que poner la IP del dispositivo en la red que al final usemos para trabajar, está pertenece a libelium_ros") "ip_acceso_wimos" => "http://10.13.4.14" "delay" => 600) "next-events" => (function (hours) (local d1 d2 list1 list2) (set d1 (format-date (date "add" (date) "hour_of_day" (if hours (* -1 hours) -24)) "yyyyMMdd")) (set d2 (format-date (date "add" (date) "hour_of_day" (if hours hours 24)) "yyyyMMdd")) (set list1 (get (http "POST" "http://10.30.30.79/services/agenda" "body" => (concat "<?xml version=\"1.0\" ?>" "<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">" "  <S:Body>" "    <ns2:findEvents xmlns:ns2=\"http://agenda.matrix.org/\">" "      <filter>" "        <roomId>12645;1</roomId>" "<startDateTime>" d1 "</startDateTime>" "<endDateTime>" d2 "</endDateTime>" "      </filter>" "    </ns2:findEvents>" "  </S:Body>" "</S:Envelope>") "properties" => ("Content-Type" => "text/xml" "Authorization" => "Basic YWRtaW46c3R1ZzQy") "output-format" => "xml") ("body" "*" 0 "*" 0 "*" 0 "*"))) (if list1 (do (set list1 (apply list1 e (get e "*"))) (set list2 (list)) (for-each list1 e (push list2 (find e x (or (= (first x) "summary") (= (first x) "startDateTime") (= (first x) "endDateTime"))))) (set list1 (list)) (for-each list2 e (push list1 (apply e x (get x "*")))) list1) null)) "current-event" => (function () (local events nowdt) (set nowdt (format-date (date) "yyyyMMdd")) (set events (next-events 50)) (if events (do (### "coge todos los eventos que hayan para el día en curso, sin tener en cuenta la hora del evento") (set events (find events e (and (>= nowdt (substring (get e 1) 0 8)) (<= nowdt (substring (get e 2) 0 8))))) events) null)) "@start" => (function (ctx data) (module-publish "loop")) "start" => (spawn (eval loop)) "loop" => (do (set events ()) (while true (try (do (### "de momento, lo inhabilitamos hasta que tengamos la red IOT disponible u otra necesaria...") (### comunicar-wimos) (sleep (* 60000 setup/access_interval))) (ex "*" => (set error-loop (list (format-date (date)) ex)))))) "dashboard" => ("widgets" => ("display_1" => ("type" => "display" "lines" => 8 "get-value" => @display "font-family" => "monospace")) "layouts" => ("mobile-vertical" => ("dimensions" => (3 4) "widgets" => (("display_1" 0 1 3 2)))) "polling-interval" => 0) "@dashboards" => (function (header data) (list "Basic" => dashboard)) "@display" => (function (header data) (local event title get-hour) (set event (current-event)) (set get-hour (function (dt) (format-date (parse-date dt "yyyyMMddHHmmss") "HH:mm"))) (if event (concat (get-hour (get event/0 1)) " - " (get-hour (get event/0 2)) " \n" (first event/0)) "SALA DISPONIBLE")) "cambia-caracteres" => (function (mensaje) (ctx data) (local letras_a_buscar letras_a_cambiar lista pos retorna) (set lista (list)) (for (set i 0) (<= i (length mensaje)) (++ i) (do (if (< i (length mensaje)) (push lista (substring mensaje i (+ i 1))))) (set letras_a_buscar (split "á,à,é,è,í,ì,ó,ò,ú,ù" ",")) (set letras_a_cambiar (split "a,a,e,e,i,i,o,o,u,u" ",")) (set retorna "") (for-each lista ele (do (set pos (locate letras_a_buscar cara (= ele cara))) (if (!= pos -1) (set ele (get letras_a_cambiar pos))) (set retorna (concat retorna ele))) retorna))) "comunicar-wimos" => (function (ctx data) (local nowdt) (try (do (set nowdt (format-date (date) "yyyyMMdd")) (### "crea la lista events con todos los eventos que hayan para ese día") (set events (next-events 50)) (if events (do (### "crea la lista eventos con solo los del día en curso") (set eventos (find events e (and (>= nowdt (substring (get e 1) 0 8)) (<= nowdt (substring (get e 2) 0 8))))))) (### "creamos la lista events según el contenido de la lista eventos, si está vacía => sala disponible") (if eventos (set events (añade-espacios (crear-lista-eventos eventos)))) (### "la lista events  es la que hay que pasarle al wimos para que se visualize en el display, según su IP") (http "POST" (concat setup/ip_acceso_wimos "/ver") "body" => (string events "format" => "json"))) (ex "*" => (set errorWi (list (format-date (date)) ex))))) "crear-lista-eventos" => (function (events) (cdt data) (local _list_event _ho_ini _mensa _fila _colx1 _colx2 _delay _len _mensa_aux) (### "cogemos el valor del delay sel Setup") (set _delay setup/delay) (set _list_event (list)) (set _ho_ini "00:00 ") (set _mensa_aux "") (### "por defecto, usaremos colx1 = 0 y colx2 =16, para utilizar todo el display. Fila la iremos alternando entre 0 y 1") (set _fila 0) (set _colx1 0) (set _colx2 16) (### "creamos la _list_event, según la lista recibida 'events', si está vacía => 'Sala Disponible', al final retorna _list_event" "la _list_event que se crea con los datos de events, se crea con el formato sig.:" "((fila,colX1,colX2,mensaje,delay, scroll, modo), ()...)" "fila => (int) nº de la fila donde vamos a mostrar el mensaje (LCD 16x2 => va 0 a 1)" "colX1, colX2 => (int) nº de columnas (X1, x2) donde mostraremos el 'mensaje'. El trozo de mensaje que se visualizará " "en dichas coordenadas es una subcadena con esta longitud (X2-X1)" "mensaje => (String) texto que pasaremos del brain4it y contendrá el mensaje de la reunión + el texto de la hora de fin + 1 espacio al final." "Todos los mensajes que le pasemos al display tendrán la misma longitud, si hay textos mas cortos se le añadirán espacios al final" "delay  => (int) tiempo de retraso en el movimiento del scroll '600' es un valor optimo para el retraso del scroll" "scroll => (int) 0 indica que no hay scroll y 1 indica que si hay scroll" "modo   => (int) hemos difinido 4 comportamientos para el display y son estos:" "           - 1 => Todo el contenido de la tabla_display se visualizará en una sóla línea del display " "           - 2 => Todo el contenido de la tabla_display se visualizará en las 2 líneas del display " "           - 3 => La tabla_display se visualizará en las 2 líneas del display, la primera entera y la segunda se divide en 2 partes " "           - 4 => La tabla_display se visualizara en las 2 líneas del display, cada línea a su vez de divide en 2 partes" "           - Por defecto usaremos el modo 1 para visualizarlo todo. ") (if events (do (for-each events elem (do (set _ho_ini (get-hour (get elem 1))) (set _mensa (cambia-caracteres (concat _ho_ini " " (cambia-caracteres (get elem 0)) " Fins a les " (get-hour (get elem 2) 0) " "))) (push _list_event (list _fila _colx1 _colx2 _mensa _delay (if (> (length _mensa) 8) 1 0) 1)) (++ _fila) (set _fila (if (> _fila 1) 0 _fila))))) (do (### "Si la sala esta disponioble, no hay eventos, creamos solo 1 elemento en la lista a modo 1 de visualización") (push _list_event (list _fila _colx1 _colx2 " Sala Disponible                  " _delay 0 1)))) _list_event) "añade-espacios" => (function (events) (local _list_event _len _aux, _list_aux i) (### "retornaremos la misma tabla recibida, con todos los mensajes de la misma igualados a la mayor longitud de ellos.") (### "cual es el mensaje mas grande¿?") (set _len 0) (set _list_event (list)) (for-each events elem (if (> (length (get elem 3)) _len) (set _len (length (get elem 3))))) (for-each events elem (do (set _aux "") (set _list_aux (clone elem)) (if (> _len (length (get elem 3))) (do (for (set i (length (get elem 3))) (< i _len) (++ i) (set _aux (concat _aux " "))) (put _list_aux 3 (concat (get elem 3) _aux)))) (push _list_event _list_aux))) _list_event) "get-hour" => (function (dt) (format-date (parse-date dt "yyyyMMddHHmmss") "HH:mm")) "events" => ((0 0 16 "12:00 Revisio. Proces selectiu Ensenyament A1 Fins a les 15:00 " 600 1 2)) "eventos" => (("Revisió. Procés selectiu Ensenyament A1" "20180904120000" "20180904150000")))