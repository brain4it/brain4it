ModuleDelete.synopsis = Deletes a snapshot of the current module.
ModuleDelete.description = Deletes the snapshots of the current module whose \
name matches the specified pattern.
ModuleDelete.snapshot_pattern = a pattern to specify the snapshots to delete. \
That pattern may contain the symbol * as a wildcard.
ModuleDelete.result = a text indicating that the specified snapshots has been \
deleted.

ModuleInit.synopsis = Initializes the current module.
ModuleInit.description = Stops the current module and removes all data \
contained in global scope.
ModuleDelete.result = a text indicating that the current module has been \
initialized.

ModuleLoad.synopsis = Loads a snapshot of the current module.
ModuleLoad.snapshot_name = the name of the snapshot to load. When omitted, the \
default snapshot ('head') is loaded.
ModuleLoad.description = Loads the specified snapshot from persistent store \
into the memory of the current module. This operation do not stops the running \
executors and may cause unpredictible results. Stopping executors before \
loading a snapshot is always recommended.
ModuleLoad.result = a text indicating that the specified snapshot has been \
loaded.

ModuleName.synopsis = Gets the name of the current module.
ModuleName.name = the name of the current module.
ModuleName.description = This function returns the name of the current module.

ModuleMonitor.synopsis = Monitors a exterior function.
ModuleMonitor.server_url = The server url.
ModuleMonitor.module_name = The module name.
ModuleMonitor.function_name = The name of the exterior function to monitor.
ModuleMonitor.listener = The listener function that will be called when the \
value returned by the exterior function changes. This listerer takes 3 \
parameters: (function_name value server_time). 
ModuleMonitor.polling_interval = The polling interval in milliseconds.
ModuleMonitor.access_key = The access key that will be sent to the server.
ModuleMonitor.result = "registered" when the listener is added, \
"unregistered" when it is removed, or null otherwise.
ModuleMonitor.description = When a listener is specified, this function \
monitors the specified exterior function from the given server and module. \
Whenever that exterior function returns a new value, the listener is called \
passing as arguments the name of the exterior function, the value it returned \
and the server time in milliseconds when this value was sent. Each listener \
runs in a different executor. \n\
If the provided listener is null, the previous registered listener is \
removed. \n\
See the REST API documentation for more information about monitoring \
exterior functions.

ModuleNotify.synopsis = Notifies that the value returned by a exterior \
function has changed.
ModuleNotify.function_name = the name of the exterior function that has changed.
ModuleNotify.listeners = the number of listeners that were monitoring \
the specified exterior functions.
ModuleNotify.description = This function notifies all the listeners \
that were monitoring the value returned by the given exterior \
functions. These listeners are called in no special order. \n\
A listener is registered with the <module-monitor> function.

ModuleSave.synopsis = Saves a snapshot of the current module.
ModuleSave.snapshot_name = the name of the snapshot that is going to be saved. \
When omitted, the default snapshot name ('head') is used.
ModuleSave.backup = when true, a copy of the specified snapshot is made \
before it is overwritten. The name of that copy is <snapshot_name> followed by \
the current date and time. By default, <backup> is false. 
ModuleSave.result = a text indicating that the module has been saved.
ModuleSave.description = Saves all data of the current module into persistent \
storage with the name <snapshot_name>. This function do not stops running \
executors and may produce an inconsistent snapshot image. Stopping executors \
before saving a module is always recommended.

ModuleSnapshots.synopsis = List all snapshots of the current module.
ModuleSnapshots.snapshot_pattern = a pattern to filter the snapshots by name. \
That pattern may contain the symbol * as a wildcard.
ModuleSnapshots.snapshot = a module snapshot representation.
ModuleSnapshots.name = the name of the snapshot.
ModuleSnapshots.last_modified = the snapshot modification date/time expressed \
as the number of milliseconds elapsed since january 1st 1970 00:00h.
ModuleSnapshots.length = the size of the snapshot in bytes.
ModuleSnapshots.description = Returns a list of the snapshots of the current \
module whose name matches the specified <snapshot_pattern>.

ModuleStart.synopsis = Starts the current module.
ModuleStart.result = a text indicating that the current module has been started.
ModuleStart.description = Starts the current module. When starting a module, \
the code contained in the <start> variable is executed. That code can \
initialize variables, listeners or hardware resources and also may spawn \
executors to perform repetivite tasks.

ModuleStop.synopsis = Stops the current module.
ModuleStop.result = a text indicating that the current module has been stopped.
ModuleStop.description = Stops the current module. When stopping a module, the \
code contained in the <stop> variable is executed. That code may release \
resources and force the termination of the running executors. \
After the execution of <stop>, all remaining executors are killed. 






