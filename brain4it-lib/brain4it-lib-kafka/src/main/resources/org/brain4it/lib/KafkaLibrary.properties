KafkaConsumer.synopsis = Creates and registers locally a Kafka consumer object
KafkaConsumer.description = Instantiates a Kafka consumer client wihout \
communicating to the Kafka server.
KafkaConsumer.servers = String URL of the Kafka server, or list of strings of\
some of the servers of the cluster.
KafkaConsumer.key_deserializer = Class name of the message value deserializer.
KafkaConsumer.value_deserializer = Class name of the message key deserializer.
KafkaConsumer.group_id = Name of the consumer group to join. Useful to \
distribute among different consumers the processing workload of messages from \
a given topic. If you want to receive all messages from the subscribed topics \
at this consumer, leave it blank to join a random, unique consumer group.
KafkaConsumer.consumer_id = The application id to be used with <kafka-poll> \
and <kafka-delete-app>.

KafkaCreateTopics.synopsis = Creates topics to send to or receive messages from
KafkaCreateTopics.description = Creates, if not existing, the topics provided \
by <topics> in the Kafka cluster reachable through <servers>. Partition number \
and replication factor is set to 1, values adapted to a single-broker cluster.
KafkaCreateTopics.servers = String URL of the Kafka server, or list of strings of\
some of the servers of the cluster.
KafkaCreateTopics.topics = Name of the topic or topics to create. String or \
list of strings.
KafkaCreateTopics.result = named list showing whether a topic was created \
(true), was already present (false), or something else (false).

KafkaDeleteApp.synopsis = Closes resources and forgets a consumer or producer
KafkaDeleteApp.description = If the app is a consumer, it will unsubscribe it \
from any subscribed topic. Using an app id after having deleted id raises an \
error.
KafkaDeleteApp.app_id = The application id provided by <kafka-producer> or \
<kafka-consumer>.
KafkaDeleteApp.deleted = True when no errors were found during deletion. False \
if some exception prevented finishing the operation.

KafkaDeleteTopics.synopsis = Delete topics from the kafka cluster 
KafkaDeleteTopics.description = Deletes, if existing, the topics provided by \
<topics>, from the Kafka cluster reachable through <servers>.
KafkaDeleteTopics.servers = String URL of the Kafka server, or list of strings of\
some of the servers of the cluster.
KafkaDeleteTopics.topics = Name of the topic or topics to delete. String or \
list of strings.
KafkaDeleteTopics.result = named list showing whether a topic was deleted \
(true), didn't already exist (false), or some error ocurred (false).

KafkaListTopics.synopsis = Lists all topics in the Kafka cluster
KafkaListTopics.description = Lists all existing topics in the Kafka cluster. \
Useful to double-check that a topic was deleted or created, to get an \
overview of which applications are running, for instance.
KafkaListTopics.servers = String URL of the Kafka server, or list of strings of\
some of the servers of the cluster.
KafkaListTopics.topics = List of string names of all current topics.

KafkaPoll.synopsis = Receives messages through a consumer
KafkaPoll.description = Subscribes the consumer to specified <topics> and does a \
long poll to the server of duration <timeout>.
KafkaPoll.consumer_id = Identifier of the consumer to use, provided by \
<(kafka-consumer)>
KafkaPoll.topics = String name of the topic, or List of topics to subscribe to \
and listen to.
KafkaPoll.timeout = Time to wait without receiving any message before ending \
the execution of the function.

KafkaProducer.synopsis = Creates and registers locally a Kafka producer object
KafkaProducer.description = Instantiates a Kafka producer client wihout \
communicating to the Kafka server.
KafkaProducer.servers = String URL of the Kafka server, or list of strings of\
some of the servers of the cluster.
KafkaProducer.key_serializer = Class name of the message key serializer.
KafkaProducer.value_serializer = Class name of the message value serializer.
KafkaProducer.producer_id = The application id to be used with <kafka-send> \
and <kafka-delete-app>.

KafkaSend.synopsis = Send messages to topics through a producer
KafkaSend.description = Sends all given <messages> to all given <topics>, \
using the producer identified by <producer-id>
KafkaSend.producer_id = Identifier of the producer to use, \
provided by <(kafka-producer)>
KafkaSend.topics = String name of the topic, or List of topics to send the \
messages to. All topics will receive the same message/s.
KafkaSend.messages = Object acording to producer's value-serializer, or List \
of Objects. If a list element is named, this name is used as Kafka's \
message key, which is left unset or null otherwise. The message value is \
always the list element.

KafkaSubscribe.synopsis = Reset consumer subscriptions to the given topics
KafkaSubscribe.description = Replace the current subscriptions for the given \
consumer with the provided topic list.
KafkaPoll.consumer_id = Identifier of the consumer to use, provided by \
<kafka-consumer>
KafkaSubscribe.topics = String name of the topic, or List of topics to \
subscribe the consumer to. An empty list <()> unsubscribes from all current \
subscribed topics.