/*
 * Brain4it
 *
 * Copyright (C) 2018, Ajuntament de Sant Feliu de Llobregat
 *
 * This program is licensed and may be used, modified and redistributed under
 * the terms of the European Public License (EUPL), either version 1.1 or (at
 * your option) any later version as soon as they are approved by the European
 * Commission.
 *
 * Alternatively, you may redistribute and/or modify this program under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either  version 3 of the License, or (at your option)
 * any later version.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the licenses for the specific language governing permissions, limitations
 * and more details.
 *
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along
 * with this program; if not, you may find them at:
 *
 *   https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 *   http://www.gnu.org/licenses/
 *   and
 *   https://www.gnu.org/licenses/lgpl.txt
 */

package org.brain4it.manager.swing;

import org.brain4it.manager.swing.text.TextUtils;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.util.Set;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import org.brain4it.client.RestClient;
import org.brain4it.io.Formatter;
import org.brain4it.io.IOConstants;
import org.brain4it.io.Parser;
import org.brain4it.io.Printer;
import org.brain4it.lang.Utils;
import org.brain4it.manager.CommandHistory;
import org.brain4it.manager.Module;
import org.brain4it.manager.ModuleEvent;
import org.brain4it.manager.TextCompleter;
import org.brain4it.manager.swing.text.*;

/**
 *
 * @author realor
 */
public class ConsolePanel extends ModulePanel
{
  private String prompt = "> ";
  private CommandHistory history;
  private SymbolMatcher matcher;
  private AutoIndenter indenter;
  private AutoCompleter completer;
  private TextCompleter textCompleter;
  private ColoredEditorKit editorKit;
  private boolean formatString = true;
  private AttributeSet errorAttrSet;
  private AttributeSet stringAttrSet;
  private Formatter formatter = new Formatter();
  private boolean firstShow = true;

  /**
   * Creates new form Console
   */
  public ConsolePanel(ManagerApp managerApp, Module module)
  {
    super(managerApp, module);
    initComponents();
    initConsole();
  }

  @Override
  public String getPanelType()
  {
    return managerApp.getLocalizedMessage("Console");
  }

  public String getPrompt()
  {
    return prompt;
  }

  public void setPrompt(String prompt)
  {
    this.prompt = prompt;
  }

  public boolean isFormatString()
  {
    return formatString;
  }

  public void setFormatString(boolean formatString)
  {
    this.formatString = formatString;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    toolBar = new javax.swing.JToolBar();
    clearButton = new javax.swing.JButton();
    functionsButton = new javax.swing.JButton();
    historyNextButton = new javax.swing.JButton();
    historyPreviousButton = new javax.swing.JButton();
    splitPane = new org.brain4it.manager.swing.JSplitPaneZero();
    outputScrollPane = new javax.swing.JScrollPane();
    outputContainer = new javax.swing.JPanel();
    outputTextPane = new ColoredTextPane();
    inputScrollPane = new javax.swing.JScrollPane();
    inputTextPane = new javax.swing.JTextPane();

    setLayout(new java.awt.BorderLayout());

    toolBar.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
    toolBar.setFloatable(false);
    toolBar.setRollover(true);

    clearButton.setIcon(IconCache.getIcon("clear")
    );
    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/brain4it/manager/swing/resources/Manager"); // NOI18N
    clearButton.setText(bundle.getString("Console.clear")); // NOI18N
    clearButton.setFocusable(false);
    clearButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    clearButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        clearButtonActionPerformed(evt);
      }
    });
    toolBar.add(clearButton);

    functionsButton.setIcon(IconCache.getIcon("functions"));
    functionsButton.setText(bundle.getString("Console.functions")); // NOI18N
    functionsButton.setFocusable(false);
    functionsButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    functionsButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        functionsButtonActionPerformed(evt);
      }
    });
    toolBar.add(functionsButton);

    historyNextButton.setIcon(IconCache.getIcon("down"));
    historyNextButton.setText(bundle.getString("Console.historyNext")); // NOI18N
    historyNextButton.setFocusable(false);
    historyNextButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    historyNextButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        historyNextButtonActionPerformed(evt);
      }
    });
    toolBar.add(historyNextButton);

    historyPreviousButton.setIcon(IconCache.getIcon("up"));
    historyPreviousButton.setText(bundle.getString("Console.historyPrevious")); // NOI18N
    historyPreviousButton.setFocusable(false);
    historyPreviousButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
    historyPreviousButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        historyPreviousButtonActionPerformed(evt);
      }
    });
    toolBar.add(historyPreviousButton);

    add(toolBar, java.awt.BorderLayout.PAGE_START);

    splitPane.setDividerSize(0);
    splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    splitPane.setResizeWeight(0.5);

    outputScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
    outputScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    outputScrollPane.addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentResized(java.awt.event.ComponentEvent evt)
      {
        outputScrollPaneComponentResized(evt);
      }
    });

    outputContainer.setBackground(new java.awt.Color(255, 255, 255));
    outputContainer.setLayout(new java.awt.BorderLayout());

    outputTextPane.setEditable(false);
    outputTextPane.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
    outputTextPane.setSelectedTextColor(new java.awt.Color(51, 51, 51));
    outputTextPane.setSelectionColor(new java.awt.Color(204, 204, 204));
    outputContainer.add(outputTextPane, java.awt.BorderLayout.SOUTH);

    outputScrollPane.setViewportView(outputContainer);

    splitPane.setLeftComponent(outputScrollPane);

    inputScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
    inputScrollPane.setMinimumSize(new java.awt.Dimension(0, 50));

    inputTextPane.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
    inputTextPane.setSelectionColor(new java.awt.Color(204, 204, 204));
    inputTextPane.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyReleased(java.awt.event.KeyEvent evt)
      {
        inputTextPaneKeyReleased(evt);
      }
    });
    inputScrollPane.setViewportView(inputTextPane);

    splitPane.setRightComponent(inputScrollPane);

    add(splitPane, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

  private void inputTextPaneKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_inputTextPaneKeyReleased
  {//GEN-HEADEREND:event_inputTextPaneKeyReleased
    int keyCode = evt.getKeyCode();
    if (keyCode == KeyEvent.VK_UP && evt.isAltDown())
    {
      if (!history.isEmpty())
      {
        inputTextPane.setText(history.getPrevious());
      }
    }
    else if (keyCode == KeyEvent.VK_DOWN && evt.isAltDown())
    {
      if (!history.isEmpty())
      {
        inputTextPane.setText(history.getNext());
      }
    }
  }//GEN-LAST:event_inputTextPaneKeyReleased

  private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
  {//GEN-HEADEREND:event_clearButtonActionPerformed
    outputTextPane.setText("");
    inputTextPane.setText("");
  }//GEN-LAST:event_clearButtonActionPerformed

  private void functionsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_functionsButtonActionPerformed
  {//GEN-HEADEREND:event_functionsButtonActionPerformed
    findFunctions();
  }//GEN-LAST:event_functionsButtonActionPerformed

  private void historyPreviousButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_historyPreviousButtonActionPerformed
  {//GEN-HEADEREND:event_historyPreviousButtonActionPerformed
    if (!history.isEmpty())
    {
      inputTextPane.setText(history.getPrevious());
    }
  }//GEN-LAST:event_historyPreviousButtonActionPerformed

  private void historyNextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_historyNextButtonActionPerformed
  {//GEN-HEADEREND:event_historyNextButtonActionPerformed
    if (!history.isEmpty())
    {
      inputTextPane.setText(history.getNext());
    }
  }//GEN-LAST:event_historyNextButtonActionPerformed

  private void outputScrollPaneComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_outputScrollPaneComponentResized
  {//GEN-HEADEREND:event_outputScrollPaneComponentResized
    outputScrollPane.setViewportView(outputContainer);
    scrollLeftDown();
  }//GEN-LAST:event_outputScrollPaneComponentResized

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton clearButton;
  private javax.swing.JButton functionsButton;
  private javax.swing.JButton historyNextButton;
  private javax.swing.JButton historyPreviousButton;
  private javax.swing.JScrollPane inputScrollPane;
  private javax.swing.JTextPane inputTextPane;
  private javax.swing.JPanel outputContainer;
  private javax.swing.JScrollPane outputScrollPane;
  private javax.swing.JTextPane outputTextPane;
  private org.brain4it.manager.swing.JSplitPaneZero splitPane;
  private javax.swing.JToolBar toolBar;
  // End of variables declaration//GEN-END:variables

  private void initConsole()
  {
    editorKit = new ColoredEditorKit();
    int scalingFactor = ManagerApp.getPreferences().getScalingFactor();
    int fontSize = ManagerApp.getPreferences().getFontSize();
    Font font = new Font("Monospaced", Font.PLAIN, fontSize * scalingFactor);
    inputTextPane.setFont(font);
    outputTextPane.setFont(font);

    inputTextPane.setEditorKit(editorKit);
    inputTextPane.putClientProperty("caretWidth", 2);
    inputTextPane.setCaretColor(Color.BLACK);
    TextUtils.updateInputMap(inputTextPane);
    ((ColoredTextPane)outputTextPane).setWrapComponent(
      outputScrollPane.getViewport());
    inputTextPane.getDocument().putProperty(
      DefaultEditorKit.EndOfLineStringProperty, "\n");
    TextUtils.updateInputMap(outputTextPane);
    inputTextPane.getDocument().addDocumentListener(new DocumentListener()
    {
      @Override
      public void insertUpdate(DocumentEvent e)
      {
        try
        {
          int offset = e.getOffset();
          int length = e.getLength();
          String text = e.getDocument().getText(offset, length);
          if (text.indexOf((char)10) != -1 || text.indexOf((char)13) != -1)
          {
            String command = inputTextPane.getText();
            command = purgeCommand(command);
            if (isValidCommand(command) && isCursorAfter(command.length()))
            {
              appendText("\n" + prompt, null);
              appendText(command);
              history.add(command);
              SwingUtilities.invokeLater(new Runnable()
              {
                @Override
                public void run()
                {
                  inputTextPane.setText("");
                }
              });
              execute(command);
            }
          }
        }
        catch (BadLocationException ex)
        {
        }
      }

      @Override
      public void removeUpdate(DocumentEvent e)
      {
      }

      @Override
      public void changedUpdate(DocumentEvent e)
      {
      }
    });

    matcher = new SymbolMatcher(inputTextPane,
      IOConstants.OPEN_LIST_TOKEN, IOConstants.CLOSE_LIST_TOKEN);
    matcher.setEnabled(true);

    indenter = new AutoIndenter(inputTextPane);
    int indentSize = ManagerApp.getPreferences().getIndentSize();
    indenter.setIndentSize(indentSize);
    indenter.setEnabled(true);

    textCompleter = new TextCompleter(module);
    completer = new AutoCompleter(inputTextPane);
    completer.setTextCompleter(textCompleter);
    completer.setEnabled(true);

    history = new CommandHistory();

    formatter.getConfiguration().setIndentSize(indentSize);
    int columns = ManagerApp.getPreferences().getFormatColumns();
    formatter.getConfiguration().setMaxColumns(columns);

    StyleContext sc = StyleContext.getDefaultStyleContext();
    errorAttrSet = sc.addAttribute(SimpleAttributeSet.EMPTY,
      StyleConstants.Foreground, Color.RED);
    stringAttrSet = sc.addAttribute(SimpleAttributeSet.EMPTY,
      StyleConstants.Foreground, Color.BLUE);

    addComponentListener(new ComponentAdapter()
    {
      @Override
      public void componentShown(ComponentEvent event)
      {
        managerApp.setAuxiliaryPanel(null);
        if (firstShow)
        {
         splitPane.setDividerLocation(0.6);
         firstShow = false;
        }
        inputTextPane.requestFocus();
      }
    });
  }

  protected void execute(final String command)
  {
    RestClient restClient = getRestClient();
    restClient.execute(module.getName(), command, new RestClient.Callback()
    {
      @Override
      public void onSuccess(RestClient client, String resultString)
      {
        try
        {
          showResult(resultString, true);
        }
        catch (Exception ex)
        {
          showError(ex);
        }
      }

      @Override
      public void onError(RestClient client, Exception ex)
      {
        showError(ex);
      }
    });
  }

  protected void findFunctions()
  {
    module.findFunctions(new Module.Callback()
    {
      @Override
      public void actionCompleted(Module module, String action)
      {
        showResult(Printer.toString(module.getFunctions()));
      }

      @Override
      public void actionFailed(Module module, String action, Exception error)
      {
        managerApp.showError(
          managerApp.getLocalizedMessage("FindFunctions"), error);
      }
    });
  }

  @Override
  public void functionsUpdated(ModuleEvent event)
  {
    Set<String> functionNames = module.getFunctionNames();
    editorKit.setFunctionNames(functionNames);
    ((ColoredTextPane)outputTextPane).setFunctionNames(functionNames);
    inputTextPane.repaint();
  }

  @Override
  public void globalsUpdated(ModuleEvent event)
  {
    Set<String> globalNames = module.getGlobalNames();
    editorKit.setGlobalNames(globalNames);
    ((ColoredTextPane)outputTextPane).setGlobalNames(globalNames);
    inputTextPane.repaint();
  }

  protected void showResult(final String resultString)
  {
    showResult(resultString, false);
  }

  protected void showResult(final String resultString, final boolean formatted)
  {
    SwingUtilities.invokeLater(new Runnable()
    {
      @Override
      public void run()
      {
        try
        {
          if (formatString && resultString.startsWith("\""))
          {
            String text = Utils.unescapeString(resultString);
            appendText("\n" + text, stringAttrSet);
          }
          else
          {
            String text = formatted ?
              formatter.format(resultString) : resultString;
            if (text.endsWith("\n"))
              text = text.substring(0, text.length() - 1);
            appendText("\n" + text);
          }
          inputTextPane.requestFocus();
        }
        catch (ParseException ex)
        {
        }
      }
    });
  }

  protected void showError(final Exception ex)
  {
    SwingUtilities.invokeLater(new Runnable()
    {
      @Override
      public void run()
      {
        String text;
        if (ex instanceof RuntimeException)
        {
          text = ex.getMessage();
        }
        else
        {
          text = ex.toString();
        }
        appendText("\n" + text, errorAttrSet);
        inputTextPane.requestFocus();
      }
    });
  }

  protected void appendText(String text)
  {
    ((ColoredTextPane)outputTextPane).appendText(text);
    scrollLeftDown();
  }

  protected void appendText(String text, AttributeSet attrSet)
  {
    ((ColoredTextPane)outputTextPane).appendText(text, attrSet);
    scrollLeftDown();
  }

  protected void scrollLeftDown()
  {
    SwingUtilities.invokeLater(new Runnable()
    {
      @Override
      public void run()
      {
        JScrollBar vertical = outputScrollPane.getVerticalScrollBar();
        vertical.setValue(vertical.getMaximum());
        JScrollBar horizontal = outputScrollPane.getHorizontalScrollBar();
        horizontal.setValue(0);
      }
    });
  }

  protected String purgeCommand(String command)
  {
    StringBuilder buffer = new StringBuilder(command);
    int i = buffer.length() - 1;
    boolean stop = false;
    while (i >= 0 && !stop)
    {
      char ch = buffer.charAt(i);
      if (ch != ' ' && ch != '\t' && ch != '\n') stop = true;
      else i--;
    }
    buffer.setLength(i + 1);
    return buffer.toString();
  }

  protected boolean isValidCommand(String command)
  {
    try
    {
      Parser.fromString(command);
      return true;
    }
    catch (RuntimeException ex)
    {
      return true;
    }
    catch (ParseException ex)
    {
      return false;
    }
  }

  protected boolean isCursorAfter(int position)
  {
    int caretPosition = inputTextPane.getCaretPosition();
    return caretPosition >= position;
  }
}
