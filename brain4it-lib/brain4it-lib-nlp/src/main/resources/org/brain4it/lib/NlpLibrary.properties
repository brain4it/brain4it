NlpParse.synopsis = Creates a natural language parse tree.
NlpParse.description = Returns a natural language parse tree of the given text.\
This tree represents the grammatical structure of the text.
NlpParse.sentence = the sentence to parse.
NlpParse.parses = the number of parse trees to generate. \
By default <parses> is 1.
NlpParse.parse_tree = a list that represents the parse tree.
NlpParse.FileNotFoundException = when the specified model file is not found.

NlpPosTag.synopsis = Gets the POS tags of a word list.
NlpPosTag.description = Returns a list that contains a pair (tag word) for \
each input word.
NlpPosTag.tag = the POS tag.
NlpPosTag.word = the word which tag is to be obtained.
NlpPosTag.output_word = the input word when <dictionary> is not specified, \
otherwise the lemma of the input word.
NlpPosTag.FileNotFoundException = when the specified model file is not found.

NlpLemmatize.synopsis = Gets the lemma of a word.
NlpLemmatize.description = Returns the lemma (canonical form) of the specified \
word and POS tag.
NlpLemmatize.word = the word which lemma is to be obtained.
NlpLemmatize.pos = the POS (part of speech) tag corresponding to the word.
NlpLemmatize.lemma = the lemma of the specified word. When that word is \
not found in the dictionary the same word is returned.
NlpLemmatize.FileNotFoundException = when the specified model file is not found.

NlpSentences.synopsis = Splits text into sentences.
NlpSentences.description = Returns a list that contains the sentences of the \
specified text.
NlpSentences.text = the text to split into sentences.
NlpSentences.sentences = a list of sentences (strings).
NlpSentences.FileNotFoundException = when the specified model file is not found.
NlpSentences.sentence = a sentence extracted from <text>.

NlpTokenize.synopsis = Extracts tokens from text.
NlpTokenize.description = Returns a list that contains the tokens (strings) \
of the specified text.
NlpTokenize.text = the text to split into tokens.
NlpTokenize.tokens = a list of tokens (strings).
NlpTokenize.FileNotFoundException = when the specified model file is not found.

NlpTranslate.synopsis = Translates text.
NlpTranslate.description = Translates a list of strings to a target <language> \
using the specified translation <service>.
NlpTranslate.text = a text to translate.
NlpTranslate.source = the source language (ISO 639-1 code). \
Some translation services ignore this parameter as they detect the source \
language automatically.
NlpTranslate.target = the target language (ISO 639-1 code).
NlpTranslate.service = the name of the translation service \
(for example, "google").
NlpTranslate.options = a list containing service specific parameters like \
credentials, operation mode, etc.
NlpTranslate.translation = a list that contains the translated text.
NlpTranslate.translated_text = the translation of the corresponding source \
text.
NlpTranslate.detected_language = the detected source language (ISO 639-1 code).

parser_model_path = the path to the parser model file. When no specified, \
<parser_model_path> is assumed to be \
<${user.home}/opennlp/en-parser-chunking.bin>.\n\
See <http://opennlp.apache.org> documentation for more details.
pos_model_path = the path to the POS (part of speech) file. \
When not specified, <pos_model_path> is assumed to be \
<${user.home}/opennlp/en-pos-maxent.bin>.
tokenizer_model_path = the path to the tokenizer model file. \
When not specified, <tokenizer_model_path> is assumed to be \
<${user.home}/opennlp/en-token.bin>.\n\
When <tokenizer_model_path> is an empty string a whitespace tokenizer \
will be used.
sentence_model_path = the path to the sentence detector model file. \
When not specified, <sentence_model_path> is assumed to be \
<${user.home}/opennlp/en-sent.bin>.\n\
When <sentence_model_path> is an empty string a newline sentence detector \
will be used.
dict_path = the path to the dictionary lemmatizer file. \
When not specified, no lemmatization will be performed.

