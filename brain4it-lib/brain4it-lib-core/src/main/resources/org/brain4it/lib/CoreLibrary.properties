# base
Assert.synopsis = Checks if an expression is true
Assert.description = This function evaluates <expression> an throws an exception \
 if the result converted to boolean is false. Otherwise returns the result of the evaluation.
Assert.expression = the expression to evaluate.
Assert.message = the message to throw when expression is false.
Assert.result = the result of evaluating the expression.
Assert.AssertFailed = when the assert expression evaluates to false.

Boolean.synopsis = Converts an expression to boolean
Boolean.description = Converfts the given expression to boolean.
Boolean.expression = the expression to convert to boolean.
Boolean.result = the result of converting the expression to boolean.

Call.synopsis = Invokes a function with parameters.
Call.description = Invokes the function with the specified parameters.
Call.func = the function to call. It can be a native function, \
a variable referencing a function or a function definition.
Call.parameter = a parameter value.
Call.result = the result returned by function func.

Comment.synopsis = Comments a block of code.
Comment.description = This function do not evaluates any of its arguments and \
always returns null. It can only be used inside functions that accept a null \
argument, like do, while, etc.
Comment.param = commented code or a descriptive text.

Cond.synopsis = Multiple conditional function.
Cond.description = Executes the actions of the first condition that \
evaluates to true.
Cond.condition_actions = a condition and its associated actions.
Cond.condition = the condition to evaluate.
Cond.action = the actions to execute when the condition is true.
Cond.result = the result of evaluating the last action.

Delete.synopsis = Deletes a variable from the current context.
Delete.description = Deletes the specified variable from the local scope \
if found, or the global scope, if not. \
This argument is not evaluated if it is already a reference.
Delete.result = true if variable exists in the current context, false otherwise.
Delete.variable = a reference to the variable to delete.

Do.synopsis = Executes a sequence of actions.
Do.description = All arguments are evaluated in order of appeareance and \
returns the result of the last evaluation.
Do.action = expression to be evaluated.
Do.result = the result of evaluating the last argument. If no arguments are \
provided, null is returned.

Eval.synopsis = Evaluates an expression.
Eval.description = This function evaluates the given expression in the current \
local scope. The result of that evaluation is evaluated again in the specified \
<local_scope>. If <local_scope> is omitted or is null, the current local scope \
is used.
Eval.expression = any expression.
Eval.local_scope = a list representing the local scope in which the expression \
will be evaluated.
Eval.result = the result of evaluating the expression.

Executors.synopsis = List all running executors.
Executors.description = This function returns a list that contains for each \
executor, the code that it is running. All code elements are named with the \
executor identifier.
Executors.executor_code = the code that is running the executor.

Exists.synopsis = Checks the existence of a variable in the current context.
Exists.description = Checks if the given variable exists in the current context. \
Returns true if variable is found in local or global scope and returns false otherwise. \
This argument is not evaluated if it is already a reference.
Exists.variable = a reference to the variable to check its existence.
Exists.result = true if variable exists in the current context, false otherwise.

For.synopsis = For loop.
For.description = Executes a sequence of actions while a condition is true. \
This condition usually involves an iteration variable.
For.init_code = initialization code executed once before enter the loop. \
Tipically this code initializes an iteration variable.
For.condition = loop condition that usually involves an iteration variable.
For.iter_code = code that is executed at the end of each iteration. \
Usually this code increments an iteration variable.
For.action = code to execute for each iteration.
For.result = the result of evaluating the last action or null is no action is specified.

Function.synopsis = Creates a user function.
Function.description = Creates a user function with the specified parameters \
and body.
Function.parameter = the variable name that will hold the parameter value.
Function.action = an action to execute. The value returned by the \
function is the result of evaluating the last expression of the function.
Function.result = a list that represents the function definition.

Functions.synopsis = List avaliable functions.
Functions.description = Returns the list of function references that match a \
given pattern sorted by name.
Functions.pattern = a regular expression to match with. Its format \
is specified in <https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html>. \
If no pattern is specified the pattern ".*" is used by default, and all available functions are returned.
Functions.func_ref = a function reference.

GlobalScope.synopsis = Returns the global scope list.
GlobalScope.description = Returns a list that contains all name/value pairs of \
the global scope of the current context.
GlobalScope.result = a list containing all elements of global scope.

Help.synopsis = Gets help for a function.
Help.description = Gets help for a function in the specified format and language.
Help.func = reference to native o user function. \
This argument is not evaluated if it is already a reference.
Help.format = can be "string" or "list". If omitted, format is "string".
Help.language = 2 letters representing the language of texts returned by this function. \
By default, the system language is assumed.
Help.result = a help list when format is "list" or a string when format is "string".

If.synopsis = Conditional function.
If.description = Executes action_when_true when condition is true \
or action_when_false otherwise.
If.action_when_true = expression to evaluate when codition is true.
If.action_when_false = expression to evaluate when condition is false.
If.result = the last evaluated expression or null if no action is executed.

Kill.synopsis = Kills a executor thread.
Kill.description = Stops the executor thread identified by executor_id. \
Returns true if at least one executor was killed.
Kill.executor_id = identifier of the executor to kill. If omitted, all executors \
of the current context will be killed.
Kill.result = true if one or more executors were killed, false otherwise.

Local.synopsis = Declares variables in local scope.
Local.description = Declares the specified variables in local scope.
Local.variable = a reference to the variable to declare. \
This argument is not evaluated if it is already a reference.

LocalScope.synopsis = Returns the local scope list.
LocalScope.description = Returns a list that contains all name/value pairs of \
the local scope of the current context.
LocalScope.result = a list containing all elements of specified local scope.

Notify.synopsis = Notifies executors waiting for a monitor.
Notify.description = Notifies all executors that are waiting for this monitor.
Notify.monitor = the object monitor the executors are waiting for.

Number.synopsis = Converts a expression to number.
Number.description = Converts the given expression to number of type precision \
using the specified radix.
Number.expression = the expression to convert to number.
Number.radix = a positive integer representing the radix of conversion.
Number.pattern = a Java DecimalFormat \
(<https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html>) \
to parse the expression as number.
Number.locale = the locale of <pattern>.
Number.type = can be "integer", "long" or "double".
Number.NumberFormatException = when the given expression can not be converted \
to number.

Parse.synopsis = Converts a string into a BPL object.
Parse.description = Converts the given string represented in the specified \
format (string, bpl, json or xml) to a BPL object.
Parse.str = the string to be converted to list.
Parse.format = the format of the given string. Can be "bpl", "json" or "xml". \
Default is "bpl".
Parse.result = a BPL object representing the data in the given string.
Parse.ParseException = when the given string can not be parsed.

Quote.synopsis = Quotes an expression.
Quote.description = Returns the given expression as is, without evaluating it.
Quote.expression = the expression to quote.
Quote.result = the expression passed as argument.

Reference.synopsis = Creates a reference from a string or a path list.
Reference.description = Creates a soft or hard reference from the specified \
string or path list.
Reference.expression = the expression to convert to reference. It can be a \
string containing the reference value, a path list or a reference. \
Path lists can only contain strings and non negative integers \
and the first element must be a string.
Reference.result = the reference represented by <expression>.
Reference.InvalidReference = when the given string or path list can not be \
converted to reference.

ReferenceList.synopsis = Gets the path list of a reference.
ReferenceList.description = Returns a list that containts the path elements of \
the given reference.
ReferenceList.ref = the reference to obtain its path list.
ReferenceList.result = a list representing the path list of <ref>.
ReferenceList.InvalidReference = when the given argument is not a reference.

Set.synopsis = Sets the value of a variable.
Set.description = Assigns the result of evaluating the given expression to \
the specified variable.
Set.variable = a reference to the variable to set. \
This argument is not evaluated if it is already a reference.
Set.result = the result of evaluating the expression.

Sleep.synopsis = Pauses execution.
Sleep.description = Pauses the execution for the specified milliseconds.
Sleep.milliseconds = the number of milliseconds to sleep.

Spawn.synopsis = Creates a new executor.
Spawn.description = Creates a new executor for running the specficied action.
Spawn.action = the action to execute in the new executor thread.
Spawn.executor_id = the identifier of the new executor.

String.synopsis = Converts an expression to string.
String.description = Converts the given expression of any type to string.
String.expression = the expression to convert to string.
String.pattern = a Java DecimalFormat or "unicode" to convert number \
to unicode char.
String.locale = the locale of <pattern>.
String.radix = the radix of conversion when the value to convert is a number.
String.unsigned = when true, number is considered unsigned, otherwise signed.
String.escape = a boolean indicating if the returned string is escaped or not.\
This option only applies when the given expression is already a string.
String.format = the format to represent the expression when it is a list. \
Accepted values are "bpl", "json" or "xml". Default value is "bpl".
String.result = a string representing the result of evaluating expression.

SubtypeOf.synopsis = Returns the subtype of an expression.
SubtypeOf.description = Returns the specific type of the result of \
evaluating expression.
SubtypeOf.expression = the expression to obtain the subtype of.
SubtypeOf.result = can be "null", "integer", "long", "double", "string", \
"boolean", "data-refefence", "function-reference", "data-list", "code-list" or \
"function-list"

Sync.synopsis = Synchronizes a code block.
Sync.description = Executes a sequence of actions obtaining first the \
lock of a monitor.
Sync.monitor = the monitor object to obtain the lock.
Sync.action = an action to be executed.
Sync.result = the result of evaluating the last action or null is no action is \
specified.

System.synopsis = Runs an operating system command.
System.description = Runs the specified operating system command and waits \
for response. It reads the standard output of this command and returns a \
list that contains the lines read.
System.command = the command to run with parameters.
System.exit_code = the exit code returned by command.
System.output = line read from standard output of command.

Throw.synopsis = Throws an exception.
Throw.description = Throws the exception object passed as argument.
Throw.exception = the exception object. It can be an exception list \
("ExceptionType" ...) or a string that represents the exception type.
Throw.message = the message of the exception, when <exception> argument is \
not a list.

Try.synopsis = Executes code catching exceptions.
Try.description = Executes the specified action catching exceptions with \
<catch_action> elements. Exceptions of type <InterruptedException> can not be \
catched.
Try.main_action = the action to execute that can throw an exception.
Try.excep_var = the variable that holds the exception thrown by <action>.
Try.catch_actions = the list containing the catch actions or null \
if no exception is going to be catched.
Try.catch_action = a named action where its name is the type of exception \
that it handles. When name is "*", the corresponding action will handle any \
type of exception.
Try.finally_action = an action that is always executed, whatever an exception \
is thrown or not.
Try.result = the result of evaluating the <main_action> or in case that \
<main_action> throws an exception, the result of evaluating the <catch_action> \
that handles that exception.

TypeOf.synopsis = Returns the type of an expression.
TypeOf.description = Returns the main type of the result of \
evaluating expression.
TypeOf.expression = the expression to obtain the type of.
TypeOf.result = can be "null", "number", "string", "boolean", "reference" or \
"list".

Wait.synopsis = Waits for monitor notification.
Wait.description = Pauses execution for the specified milliseconds or \
  until a notification for this monitor is received.
Wait.monitor = the monitor object to listen notifications from.
Wait.milliseconds = the number of milliseconds to wait for a notification. If \
omitted, there is no wait.

Watch.synopsis = Watches for changes.
Watch.description = Pauses execution until the result of evaluating expression \
is different of the specified value. If after 30 seconds no change is produced, \
the current value of expression is returned.
Watch.expression = the expression to evaluate.
Watch.value = the value to compare with the result of evaluating expression. \
If omitted, value is assigned the result of expression.
Watch.result = the result of expression.

While.synopsis = Executes code while a condition is true.
While.description = Executes the specified action sequence while the given \
condition is true.
While.condition = condition to evaluate. When evaluates to false, loop ends.
While.action = an action to execute in each iteration.
While.result = the result of evaluating the last action.

# bit

int_value = an integer value.

BitAnd.synopsis = Bitwise AND operation.
BitAnd.description = Returns the result of applying a bitwise AND operation on all its arguments.
BitAnd.result = an integer that is the result of a bitwise AND operation on its arguments.

BitNot.synopsis = Bitwise NOT operation.
BitNot.description = Returns the result of applying a bitwise NOT operation on the specified argument.
BitNot.result = an integer that is the result of a bitwise NOT operation on the specified argument.

BitOr.synopsis = Bitwise OR operation.
BitOr.description = Returns the result of applying a bitwise OR operation on all its arguments.
BitAnd.result = an integer that is the result of a bitwise OR operation on its arguments.

BitXor.synopsis = Bitwise XOR operation.
BitXor.description = Returns the result of applying a bitwise XOR operation on all its arguments.
BitXor.result = an integer that is the result of a bitwise XOR operation on its arguments.

BitShift.synopsis = Shift bits.
BitShift.description = Shifts <int_value> the absolute number of <shift> bits \
to the left if <shift> is negative or the right if <shift> is positive. \
No shift is done when <shift> is zero.
BitShift.shift = the number of bits to shift. \
The signum of this parameter determines the direction of the shifting.
BitShift.result = the result of shifting <int_value> the specified \
number of bits.

# date

date_millis = a date/time expressed as the number of milliseconds elapsed \
since january 1st 1970 00:00h.
date_string = a date/time represented as string.
date_pattern = a date pattern as specified in \
<https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html>. \
When omitted, the default system date pattern is used.

Date.synopsis = Date management.
Date.description = This function can get the current date in milliseconds \
or change a date field on the given date.
Date.operation = the operation to perform: "now" to get the current time, \
"add" to add a value to a date field of date_millis and "set" to set a value \
for a date field of date_millis. The operation, when omitted, is "now".
Date.field = the field date to add or set. It can be one of the following: \
"year", "day_of_month", "day_of_week", "day_of_year", "hour_of_day", "hour", \
"month", "week_of_month", "week_of_year", "minute", "second" or "millisecond".
Date.value = the value to add or set to a date field.
Date.result = a date/time expressed in milliseconds that is the result of \
performing the specified operation ("now", "add" or "set") on the given arguments.

FormatDate.synopsis = Formats date to string.
FormatDate.description = Formats a date/time expressed in milliseconds to string using the specified date pattern.

ParseDate.synopsis = Converts string to date.
ParseDate.description = Converts a string representing a date/time to milliseconds using the specified date pattern.

# list

spec = index, name or path list of the element.

elem_var = iteration variable defined in local scope that represents each \
element in the list.

Append.synopsis = Appends the elements in a list to another list.
Append.description = Appends the elements in the second list to the first list. \
Names in the second list are also added to the first list. \n\
If a name in the second list was already present in the first list, \
the value associated with that name in the first list is replaced by the \
value from the second list.
Append.list1 = the target list.
Append.list2 = the list whose elements will be appended to the first list.
Append.result = the first list containing its own elements and the elements \
in the second list.

Apply.synopsis = Creates a new list by evaluating an expression for each element in a list.
Apply.description = Returns a new list that is the result of evaluating the \
specified expression for each element in the given list.
Apply.lst = the list to apply the expression.
Apply.expression = the expression to apply to each element in the given list.
Apply.result = a new list that is the result of evaluating the \
specified expression for each element in the given list.

Clone.synopsis = Clones a list.
Clone.description = Creates a copy of the specified list. When recursive is \
true all elements in the list are cloned recursively. When not, only the given \
list is cloned but not the elements it contains.
Clone.lst = the list to be cloned.
Clone.recursive = a boolean indicating if cloning is performed recursivelly.
Clone.result = a new list that is a copy of the original.

Empty.synopsis = Test if a list is empty.
Empty.description = Returns true if the given list is empty, false otherwise.
Empty.lst = the list to test if it is empty.
Empty.result = true if list is empty or false if contains an element.

Find.synopsis = Find the elements in a list that meet a condition.
Find.description = Returns a new list that contains all the elements in the \
given list that meet the specified condition.
Find.lst = the list in which to look for the elements.
Find.condition = the condition (a boolean expression) that elements must meet.
Find.result = new list that contains all the elements in the \
given list that meet the specified condition. If no element meets the \
condition, the returned list will be empty.

First.synopsis = Get the first element from a list.
First.description = Returns the first element from the given list or null \
if the list is empty.
First.lst = the list from which to obtain the first element.
First.result = the first element in the list or null is the list is empty.

ForEach.synopsis = Executes an action for each element in a list.
ForEach.description = Executes an action for each element in the given list.
ForEach.lst = the list to iterate.
ForEach.action = an action to execute for each element in the list.
ForEach.result = the result of evaluating the last action for the last \
element in the list.

Get.synopsis = Gets an element from a list.
Get.description = Returns an element from the given list by index, by name or \
by path.
Get.lst = the list from which to obtain an element.
Get.result = the element from the list referenced by spec.

GetName.synopsis = Gets the name of a position from a list.
GetName.description = Gets the name of the specified index in the given list.
GetName.lst = the list from which to obtain a name.
GetName.index = the index in the list to obtain the name.
GetName.result = the name at index position of the given list or null if this \
position has no name.

Has.synopsis = Test if a list has a name or can be acceded by an index.
Has.description = When <spec> is a name, this function returns true if <list> \
has this name or false otherwise. When <spec> is a number, this function \
returns true only if <spec> is >= 0 and < <list> size.
Has.lst = the list to determine if can be acceded by the given name or index.
Has.result = true if <list> can be acceded by <spec> or false otherwise.

Locate.synopsis = Gets the location of the first element in a list that \
meets a condition.
Locate.description = Returns the index of the first element in the given list \
starting at <from_index> that meets the specified <condition> or -1 if \
no element meets that condition.
Locate.lst = the list to look for the element.
Locate.condition = the condition to meet.
Locate.from_index = the index from which to start the search.
Locate.result = the index of the first element in the list that meets the \
<condition>.

NameIndex.synopsis = Gets the index associated to a name in a list.
NameIndex.description = Returns the index of the element in the given list \
that has the specified name.
NameIndex.lst = the list from which to obtain the index of the name.
NameIndex.name = the name whose index is to be determined.
NameIndex.index = the index of the specified name or -1 if the given list \
does not have this name.

Insert.synopsis = Inserts an element into a list.
Insert.description = Inserts the specified element into the given list at the \
specified index.
Insert.lst = the list in which to insert the element.
Insert.index = the index where the element is to be inserted.
Insert.element = the element to be inserted.
Insert.result = the list passed as argument containing the new inserted \
element.

Last.synopsis = Gets the last element from a list.
Last.description = Returns the last element from the given list or \
null if the list is empty.
Last.lst = the list from which to obtain the last element.
Last.result = the last element in the list or null if the list is empty.

List.synopsis = Creates a new list.
List.description = Creates a new list and adds the arguments to it. \
If arguments have names, they are also added to the list.
List.value = a value to add to the list. It may have a name.
List.result = a new list that contains the arguments of this function call.

Match.synopsis = Matches a list with a pattern.
Match.description = This function matches the given list and all its sublists \
with the specified list pattern. If a match is found, the substitution \
variables in the list pattern are set in local context and the given expression \
is evaluated. Some special variables are also set for each match: match_parent$, \
match_position$ and match_map$. match_parent$ is the parent list of the match, \
match_position$ is the position in match_parent$ list where the match was found, \
and match_map$ is a list that contains all the substitution variables as \
name/value pairs. \
If the evaluation of the expression returns false, the matching process continues. \
It the evaluation returns true, the matching process stops and the function \
returns true. When no match is found or the specified expression never returns \
true, the function returns false.
Match.lst = the list to match.
Match.list_pattern = the list pattern. It may contain two kind of substitution \
variables: single variables ending with a question mark (ex: x?, y?) or list \
variables ending with 3 dots (ex: a..., b...). Single variables substitute a \
single element, while list variables may substitute from 0 to N consecutive elements.
Match.expression = the expression to evaluate for each match found. It may \
perform some test on the substitution variables or may do changes in the \
first list. The expression must return false to continue the matching process \
or true to stop it. When omitted, expression is true.
Match.match_found = true if a match was found of false if not.

Merge.synopsis = Replaces variables in a list.
Merge.description = For each reference in the first list that is found \
as a name is the second list, it is replaced by the value associated to that \
name in the second list.
Merge.lst = the list that may contain variables (references). It can also be \
a single variable or a literal.
Merge.variables = a list with name/value pairs.
Merge.result = a new list that is a copy of the original with the variables \
replaced.

Names.synopsis = Gets the names from a list.
Names.description = Returns a new list that contains all the names of the \
given list in order of appearance. If the list has no names, an empty \
list is returned.
Names.lst = the list from which to obtain the names.
Names.result = a new list that contains all the names of the given list in \
order of appearance.

Pop.synopsis = Extracts and returns the last element from a list.
Pop.description = Extracts and returns the last element from the given list or \
null if the list is empty.
Pop.lst = the list from which to extract the last element.
Pop.result = the last element from the list or null if the list is empty.

Push.synopsis = Adds an element to a list.
Push.description = Adds the specified element to the given list.
Push.lst = the list in which to add the element.
Push.element = the element to add to the list.
Push.result = the list passed as argument containing the specified element \
at the last position.

Put.synopsis = Puts an element in a position of a list.
Put.description = Replaces the element in the given list at the specified \
index, name or path with the given element.
Put.lst = the list in which to put the element.
Put.element = the element to be putted.
Put.result = the previous element at the position that has been modified.

PutName.synopsis = Sets the name to a position in a list.
PutName.description = Sets the name to the specified index in the given list.
PutName.lst = the list in which to set the name.
PutName.index = the position where to put the name.
PutName.name = the name to put.
PutName.result = the list passed as argument containing the specified name at \
the given index.

Remove.synopsis = Removes elements from a list.
Remove.description = Removes the specified element from the given list \
(by index, name or path) or removes all elements if spec is not defined.
Remove.lst = the list from which to remove elements.
Remove.result = the element that was removed from the list or null if all \
elements where removed.

Reverse.synopsis = Reverses the elements of a list.
Reverse.description = Returns a new list that contains all the elements of \
the given list in reverse order.
Reverse.lst = the list to be reversed.
Reverse.result = a copy of the given list that has the elements in \
reserve order.

Size.synopsis = Returns the size of a list.
Size.description = Returns the number of elements in the list.
Size.lst = the list whose size is to be determined.
Size.result = the number of elements in the list.

Sort.synopsis = Sorts a list.
Sort.description = Returns a new list that is the result of sorting the \
elements of given list. By default, this function sorts elements in ascending \
order, but a comparator function can be specified to order in other ways.
Sort.lst = the list to sort.
Sort.comparator = a user defined function that compares 2 values. It takes \
2 arguments (x y), and must return a negative integer if x < y, \
a positive integer if x > y, or zero if x = y. When no comparator is specified, \
a default ascending order comparator is used.
Sort.result = a copy of the given list that contains the elements sorted by the \
specified comparator.

Sublist.synopsis = Returns a sublist of a list.
Sublist.description = Returns a new list that contains the elements from the \
given list between from_index and to_index position.
Sublist.lst = the list from which to obtain a sublist.
Sublist.from_index = the starting index of the sublist.
Sublist.to_index = the ending index of the sublist (excluded). When omitted, \
to_index is equal to the size of the list.
Sublist.result = a new list that contains the elements from from_index \
to to_index (excluded) in the given list.

# logical

And.synopsis = Logical AND operation.
And.value = a boolean value to apply the and operation.
And.description = Returns the result of applying a logical AND operation on its boolean arguments.
And.result = true if all its arguments are true, false otherwise.

Different.synopsis = Test if arguments are different.
Different.description = Returns true if its arguments are different, false otherwise.
Different.value1 = the first value to compare.
Different.value2 = the second value to compare.
Different.result = true if not all arguments are equal, false otherwise.

Equals.synopsis = Test if arguments are equal ignoring list names.
Equals.description = Returns true if all arguments are equal, false otherwise. \
When comparing lists, they will be equal if contain the same data.
Equals.value = a value to compare.
Equals.result = true if all arguments are equal, false otherwise.

NameEquals.synopsis = Test if arguments are equal comparing list names.
NameEquals.description = Returns true if all arguments are equal, false otherwise. \
When comparing lists, they will be equal if contain the same data and the \
same structure.
NameEquals.value = a value to compare.
NameEquals.result = true if all arguments are equal, false otherwise.

ExactEquals.synopsis = Test if arguments are exactly equal.
ExactEquals.description = Returns true if all arguments are exactly equal \
(same subtype and value), false otherwise. \
When comparing lists, they will be equal if they are the same.
ExactEquals.value = a value to compare.
ExactEquals.result = true if all arguments are exactly equal, false otherwise.

GreaterOrEqualTo.synopsis = Test if one value is greater than or equal to another.
GreaterOrEqualTo.description = Returns true if for each two consecutive arguments \
the first one is greater than or equal to the second one. Returns false otherwise.
GreaterOrEqualTo.value = a value to compare.
GreaterOrEqualTo.result = true if for each two consecutive arguments the first \
one is greater than or equal to the second one. False otherwise.

GreaterThan.synopsis = Test if one value is greater than another.
GreaterThan.description = Returns true if for each two consecutive arguments \
the first one is greater than the second one. Returns false otherwise.
GreaterThan.value = a value to compare.
GreaterThan.result = true if for each two consecutive arguments the first \
one is greater than the second one. False otherwise.

LessOrEqualTo.synopsis = Test if one value is less than or equal to another.
LessOrEqualTo.description = Returns true if for each two consecutive arguments \
the first one is less than or equal to the second one. Returns false otherwise.
LessOrEqualTo.value = a value to compare.
LessOrEqualTo.result = true if for each two consecutive arguments the first \
one is less than or equal to the second one. False otherwise.

LessThan.synopsis = Test if one value is less than another.
LessThan.description = Returns true if for each two consecutive arguments \
the first one is less than the second one. Returns false otherwise.
LessThan.value = a value to compare.
LessThan.result = true if for each two consecutive arguments the first \
one is less than the second one. False otherwise.

Not.synopsis = Logical NOT operation.
Not.value = a boolean value to apply the not operation.
Not.description = Returns the result of applying a logical NOT operation on \
its boolean argument.
Not.result = true if argument is false, false otherwise.

Or.synopsis = Logical OR operation.
Or.value = a boolean value to apply the or operation.
Or.description = Returns the result of applying a logical OR operation on \
its boolean arguments.
Or.result = true if any of its arguments is true, false otherwise.

#\u00a0math

angle_rad = an angle expressed in radians.

Abs.synopsis = Absolute value of a number.
Abs.description = Returns the absolute value of the given number.
Abs.value = the number whose absolute value is to be determined.
Abs.result = the absolute value of the specified number.

Acos.synopsis = Arc cosine of a value.
Acos.description = Returns the trigonometric arc cosine of a value.
Acos.value = the argument whose arc cosine is to be determined.

Asin.synopsis = Arc sine of a value.
Asin.description = Returns the trigonometric arc sine of a value.
Asin.value = the argument whose arc sine is to be determined.

Atan.synopsis = Arc tangent of a value.
Atan.description = Returns the trigonometric arc tangent of a value.
Atan.value = the argument whose arc tangent is to be determined.

Ceil.synopsis = Gets the smallest integer number that is greater than or equal \
to a value.
Ceil.description = Returns the smallest (closest to negative infinity) integer \
number that is greater than or equal to the specified value.
Ceil.value = a double value.
Ceil.result = the smallest integer number that is greater than or equal to the \
specified value.

Cos.synopsis = Cosinus of an angle.
Cos.description = Returns de trigonometric cosine of an angle expressed in radians.
Cos.value = the cosine of angle_rad.

Decrement.synopsis = Decrements a variable.
Decrement.description = Decrements the given variable by the specified \
value. When value is omitted, variable is decremented by 1.
Decrement.variable = a reference to the variable to decrement. \
This argument is not evaluated if it is already a reference.
Decrement.value = the value to decrement the variable.
Decrement.result = the variable value after decrementing it.

Division.synopsis = Divides 2 numbers.
Division.description = Returns a double that is the result of dividing the \
specified numbers.
Division.dividend = the dividend of the division.
Division.divisor = the divisor of the division.
Division.result = a double that is the result of dividing dividend by divisor.

Floor.synopsis = Gets the largest integer number that is less than or equal to \
a value.
Floor.description = Returns the largest (closest to positive infinity) integer \
number that is less than or equal to the specified value.
Floor.value = a double value.
Floor.result = the largest integer number that is less than or equal to \
the specified value.

Increment.synopsis = Increments a variable.
Increment.description = Increments the given variable by the specified \
value. When value is omitted, variable is incremented by 1.
Increment.variable = a reference to the variable to increment. \
This argument is not evaluated if it is already a reference.
Increment.value = the value to increment the variable.
Increment.result = the variable value after incrementing it.

IntegerDivision.synopsis = Division of 2 integer numbers.
IntegerDivision.description = Returns the division of the \
specified integer numbers.
IntegerDivision.dividend = the dividend of the division converted to integer.
IntegerDivision.divisor = the divisor of the division converted to integer.
IntegerDivision.result = an integer that is the result of dividing dividend by divisor.

Log10.synopsis = Base 10 logarithm of a value.
Log10.description = Returns the base 10 logarithm of a value.
Log10.value = the value to get the base 10 logarithm.
Log10.result = the base 10 logarithm of value.

Logn.synopsis = Natural logarithm of a value.
Logn.description = Returns the natural logarithm (base e) of a value.
Logn.value = the value to get the natural logarithm.
Logn.result = the natural logarithm of value.

Modulus.synopsis = Remainder of a division.
Modulus.description = Returns the remainder of the division of the specified numbers.
Modulus.dividend = the dividend of the division.
Modulus.divisor = the divisor of the division.
Modulus.result = the remainder of the division of dividend by divisor.

Multiply.synopsis = Multiplication of numbers.
Multiply.description = Returns the result of multiplicating the specified values.
Multiply.value = a value to multiply.
Multiply.result = the multiplication of the specified values or 1 if no arguments are provided.

Pow.synopsis = Raises a value.
Pow.description = Returns the given value raised to the power of the specified exponent.
Pow.value = the value to raise.
Pow.exponent = the exponent.
Pow.result = value raised to the power of exponent.

Random.synopsis = Random number generation.
Random.description = Returns a random number between 0 and max_value (excluded).
Random.max_value = the max_value (excluded) that can return this function. If \
not specified, max_value is 1.
Random.result = a value between 0 and max_value (excluded).

Round.synopsis = Gets the closest integer number to a value.
Round.description = Returns the closest integer number to the specified value, \
with ties rounding to positive infinitive.
Round.value = a double value.
Round.result = the closest integer number to the specified value.

Sin.synopsis = Sinus of an angle.
Sin.description = Returns the trigonometric sine of an angle expressed in radians.
Sin.value = the sine of angle_rad.

Sqrt.synopsis = Square root of a value.
Sqrt.description = Returns the square root of a value.
Sqrt.value = a value whose square root is to be determined.
Sqrt.result = the square root of value.

Subtract.synopsis = Subtract two numbers.
Subtract.description = When <value2> is present, this function returns the \
result of subtracting <value2> from <value1>. If <value2> is omitted, \
<-value1> is returned.
Subtract.value1 = the value to subtract from.
Subtract.value2 = the value to be subtracted.
Subtract.result = the result of evaluating <value1> - <value2> or \
<-value1> if <value2> is omitted.

Sum.synopsis = Sum of numbers.
Sum.description = Returns the result of adding the specified values.
Sum.value = a value to add.
Sum.result = the sum of the specified values or 0 if no arguments are provided.

Tan.synopsis = Tangent of an angle.
Tan.description = Returns the trigonometric tangent of an angle expresses in radians.
Tan.value = the tangent of angle_rad.

# net

Http.synopsis = HTTP request.
Http.description = Performs an HTTP request to the resource identified by url.
Http.method = HTTP method ("GET", "POST", "PUT", "DELETE", etc.).
Http.url = URL to request.
Http.data = data to send in POST and PUT methods.
Http.properties = HTTP header properties to send in request (list of name/value pairs).
Http.connect_timeout = connect timeout in milliseconds.
Http.read_timeout = read timeout in milliseconds.
Http.input_format = the format to convert <data> parameter to string \
("bpl", "json", "xml" or "string"). By default, "string" format is assumed.
Http.output_format = format to convert response <body> string to data \
("bpl", "json", "xml" or "string"). By default, "string" format is assumed.
Http.download_file = the path of the file to download the response.
Http.upload_file = the path of the file to upload.
Http.status = the HTTP result code
Http.message = the HTTP result message
Http.headers = the HTTP response headers
Http.body = the HTTP response body
Http.MalformedURLException = when the url format is invalid.
Http.UnknownHostException = when host name can not be resolved.
Http.ConnectException = when connection is refused.
Http.TimeoutException = when the host does not response for the given timeouts.
Http.IOException = when an error occurs while reading or writing data.

# text

reg_exp = a regular expression as defined in \
<https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html>.

Concatenate.synopsis = Concatenates strings.
Concatenate.description = Returns a new string that is the result of concatenating its arguments.
Concatenate.str = a string to concatenate.
Concatenate.result = a new string that is the result of concatenating its arguments.

DownCase.synopsis = Converts string to lowercase.
DownCase.description = Returns the specified string converted to lowercase.
DownCase.str = the string to downcase.
DownCase.result = the given string converted to lowercase.

LocateString.synopsis = Gets the location of the first occurrence of a \
substring inside a string.
LocateString.description = Returns the location within the given string \
of the first occurrence of the specified <substring>, starting at the \
specified <from_index>.
LocateString.str = the string to find the substring in.
LocateString.substring = the substring to locate.
LocateString.from_index = the starting index to find the <substring>.
LocateString.result = the location of the first occurrence of <substring> \
starting at <from_index>.

Length.synopsis = Gets the length of a string.
Length.description = Returns the number of characters of the given string.
Length.str = the string to get the length.
Length.result = the number of characters of the given string.

MatchString.synopsis = Matches a string with a regular expression.
MatchString.description = Tells whether or not the given string matches \
the specified regular expression.
MatchString.str = the string to match.
MatchString.matches = true if string matches with <reg_exp>, false if not.

ReplaceString.synopsis = Replaces all occurrences of a pattern in a string \
with an other string.
ReplaceString.description = Returns a new string where all occurrences of the \
given pattern, expressed as a regular expression, have been replaced with the \
specified replacement string.
ReplaceString.str = the string to replace.
ReplaceString.replace = the string that replaces the occurrences of the pattern.
ReplaceString.matches = a string where all occurrences of the \
given pattern have been replaced with the specified text.

Split.synopsis = Splits a string around matches of a regular expression.
Split.str = the string to split.
Split.description = Splits the given string around matches of the specified \
 regular expression. If regular expression is omitted, " " is used by default.
Split.part = a part of the given string.

Substring.synopsis = Gets the fragment of a string between two indices.
Substring.description = Returns the fragment of the given string between \
the specified indices.
Substring.str = the string to extract a fragment.
Subtring.from_index = the starting index of the fragment.
Substring.to_index = the ending index of the fragment. \
When omitted, this argument is equal to the length of the string.
Substring.result = the fragment of the given string from from_index to to_index.

Trim.synopsis = Removes starting and ending spaces from a string.
Trim.description = Returns the specified string without starting or ending spaces.
Trim.str = the string to trim.
Trim.result = the given string without starting and ending spaces.

UpCase.synopsis = Converts string to uppercase.
UpCase.description = Returns the specified string converted to uppercase.
UpCase.str = the string to upcase.
UpCase.result = the given string converted to uppercase.

TimerSchedule.synopsis = Schedules a task for future execution.
TimerSchedule.description = Schedules a task that will call the given user \
function for execution after <delay> milliseconds. \n\
If a <period> greater than zero is specified, the function will be called \
repeatedly at intervals of <period> milliseconds. \n\
Each function call will always run in a different executor, \
so it does no matter how long it takes to finish. \n\
By default, new calls are discarded while a previous one is still running. \
To allow call overlap, set <overlap> parameter to true.

TimerSchedule.func = the user function to execute.
TimerSchedule.delay = the delay in milliseconds before calling the function.
TimerSchedule.period = the period in milliseconds for repeated execution.
TimerSchedule.overlap = when true call overlap is allowed. By default \
<overlap> is false.
TimerSchedule.task_id = the task identifier that will be used later to cancel \
the task execution.

TimerCancel.synopsis = Cancels a scheduled task.
TimerCancel.description = Cancels the scheduled task identified by \
<task_id> if it was created in the current context. \
When <task_id> is not specified, all tasks associated with the current context \
will be cancelled. \n\
If the task is running when calling this function, it will continue to \
completion, but it will never run again.
TimerCancel.task_id = the task identifier.
TimerCancel.cancelled = true if at least one task was cancelled, \
false otherwise.

TimerTasks.synopsis = Shows the current scheduled tasks.
TimerTasks.description = Returns a list that contains the <task_id> and the \
function code of the active tasks that were created in the current context.
TimerTasks.task = the function associated with the task, named with \
its <task_id>.




