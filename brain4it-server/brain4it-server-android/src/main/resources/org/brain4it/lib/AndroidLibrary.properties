AndroidNotify.synopsis = Generates an Android notification
AndroidNotify.description = Generates an Android notification with the given \
text message.
AndroidNotify.message = the message to notify.

AudioPwm.synopsis = Generates a PWM signal through the audio output.
AudioPwm.description = This function generates a PWM (pulse width modulation) \
signal with the specified parameters throught the audio output. The signal is \
interrupted when volume is 0.
AudioPwm.volume = the audio volume. A value in the range 0-100. By default, \
volume is 0.
AudioPwm.period = the period of the signal in milliseconds.
AudioPwm.left_pulse = the left pulse duration in milliseconds (less than <period>).
AudioPwm.right_pulse = the right pulse duration in milliseconds (less than <period>).

Beep.synopsis = Plays a beep sound.
Beep.description = Plays a beep sound with the specified volume. \
This functions blocks until the sound stops.
Beep.volume = the audio volume. A value in the range 0-100. By default, volume \
is 50.

Gps.synopsis = Gets the GPS location.
Gps.description = This function accepts 2 operations: \
"register": registers the <listener> function that will process the location \
updates (only one listener per module is allowed),\u00a0\
"unregister": removes the previous location listener.
Gps.operation = the operation to execute: "register" or "unregister".
Gps.listener = the listener function that will be invoked every time that \
GPS location is updated. It will receive a list as argument that contains \
this information: <(provider timestamp latitude longitude altitude speed \
accuracy)>.

Sensor.synopsis = Reads the sensors of the device.
Sensor.description = This function accepts 4 operations: \
"types": returns a list that contains all the available types of sensor. \
"register": registers the <listener> function that will process the values \
for the given <type> of sensor. \
"unregister": removes the previous registered listener for the given <type> \
of sensor.
"listeners": returns a list that contains all the types of sensor that are \
currently registered for the current module.
Sensor.operation = the operation to execute:  "register", \
"unregister", "listeners" or "types".
Sensor.type = The type of sensor to read for "register" and "unregister" \
operations. The sensor type can be one of the following: "accelerometer", \
"magnetic", "gyroscope", "light", "pressure", "proximity", "gravity", \
"rotation", "humidity" or "temperature".
Sensor.listener = the listener function that will be invoked every time the \
value of the sensor changes. It will receive a list as argument that contains \
this information: <(type_of_sensor timestamp sensor_data ... sensor_data)>.

Tts.synopsis = Converts text to speech.
Tts.description = Converts the given text to speech with the specified volume. \
This functions blocks until the text is synthesized.

Tts.text = the text to be synthesized.
Tts.volume = the audio volume. A value in the range 0-100. \
By default, the volume is 50.
Tts.language = the language in which to synthesize the text. An ISO 639 \
alpha-2 or alpha-3 language code. \
If omitted, the language of the default locale is used.
Tts.result = the text that was synthesized.

Vibrate.synopsis = Makes the device vibrate.
Vibrate.description = Makes the device vibrate for the specified milliseconds.
Vibrate.millis = the duration of vibration in milliseconds. \
By default, millis is 1000.

Speaker.synopsis = Enables or disables the speaker sound.
Speaker.description = When <state> is true the speaker is enabled \
whatever headphones are connected or not. When it is false, the speaker \
is disabled. If <state> argument is not specified this function returns the \
current speaker state.
Speaker.state = true to enable the speaker or false to disable it.
Speaker.result = the current speaker state.