pin_num = the number of the GPIO pin according to this pin numbering \
scheme: <http://pi4j.com/pin-numbering-scheme.html>.

Delay.synopsis = Pauses execution for the specified microseconds.
Delay.description = Pauses the execution of the current thread for the \
specified microseconds.
Delay.microseconds = the number of microseconds to pause the execution.
Delay.result = the number of microseconds that the execution was paused.

GpioMode.synopsis = Sets the operating mode of a GPIO pin.
GpioMode.description = Sets the operating mode for the given GPIO pin.
GpioMode.mode = the operating mode of the pin, that can be: "in" for input, \
"out" for output, "pwm" for harware pwm, "up" for pull-up, \
"down" for pull-down, "tri" for tri-state and "off" to disable the pin.
GpioMode.result = the operating mode set for the pin.

GpioPulseIn.synopsis = Measure the duration of a pulse.
GpioPulseIn.description = Returns the duration of a pulse of value <level> \
in the specified pin measured in microseconds. If the initial value of the pin \
is different from <level>, this function will wait for a pin change a maximum \
time of <timeout>. If timeout is exceeded, -1 will be returned.
GpioPulseIn.level = the level of the pulse, 0 for LOW and 1 for HIGH.
GpioPulseIn.timeout = the maximum time to wait for a pin change in microseconds.
GpioPulseIn.ellapsed = the duration of the pulse in microseconds or -1 if the \
value of the pin do not change for <timeout> microseconds.

GpioRead.synopsis = Reads a GPIO pin.
GpioRead.description = Reads the value of the specified GPIO pin.
GpioRead.result = the value of the pin: 0 (LOW) or 1 (HIGH).

GpioWrite.synopsis = Writes in a GPIO pin.
GpioWrite.description = Writes the given value in the specified GPIO pin.
GpioWrite.value = the value to write in the pin. It can be 0 or false for LOW, \
or 1 or true for HIGH.
GpioWrite.result = the value set in the pin.

GpioPwm.synopsis = Sets the PWM duty cycle value for a GPIO pin.
GpioPwm.description = This function modifies the duty cycle of the PWM signal \
in the specified pin.  The duty cycle % of the signal will be \
<100 * value / range>, where the range is set with the function \
<gpio-pwmc>. Prior to use this function <(gpio-mode pin_num "pwm")> \
and <(gpio-pwmc clock range)> must be called. 
GpioPwm.pin_num = the pin number that will generate the hardware PWM signal. \
Not all pins in the RaspberryPi suports hardware PWM \
(see RaspberryPi documentation for more details).
GpioPwm.value = a value between 0 and the range previously set with the \
function <gpio-pwmc>. 
GpioPwm.result = the value set in <pin_num>.

GpioPwmc.synopsis = Sets the hardware PWM signal parameters.
GpioPwmc.description = This functions setups the frequency and range of all \
hardware PWM pins of the Raspberry Pi. The frequency of the PWM signal is the \
result of dividing the internal 19.2Mhz clock by <clock> and by <range>.
GpioPwmc.clock = the internal clock divider, a value between 2 and 4095.
GpioPwmc.range = the range of the PWM signal, a value less than 4096. \
By default, range is 100.
GpioPwmc.frequency = the frequency (in Hz) of the PWM signal that is equal to \
<19.2e6 / clock / range>.

Melody.synopsis = Plays a melody.
Melody.description = This function generates a variable PWM signal in the \
specified pin which frequency (tone) and duration (tempo) is taken from the \
<tone_tempo_list>. Typically a buzzer or speaker is connected to <pin_num> to \
play the sound.
Melody.note_tempo_list = a list that contains the tones (Hz) and \
tempos (ms) of the melody to play: (tone1 tempo1 tone2 tempo2 ...).

SoftPwm.synopsis = Generates a software PWM signal in a GPIO pin.
SoftPwm.description = The frequency of the generated signal is \
<1 / (range * 0.0001s)> Hz, and the duty cycle % is <100 * value / range>. \
A typical range of 100, generates a signal with a frequency of 100Hz. \
The <range> can be omitted if you only want to set the <value> to modify the \
duty cycle of the signal. When <range> is 0 the signal generation is \
interrupted.
SoftPwm.value = a value between 0 and <range> that determines the duty cycle \
of the signal.
SoftPwm.range = the duration of a cycle in units of 10us. For example, \
range 100 = 100 * 10us = 0.01s (100Hz). When omitted, the range is not \
changed.
SoftPwm.result = the value set for the signal generation.