/*
 * Brain4it
 * 
 * Copyright (C) 2018, Ajuntament de Sant Feliu de Llobregat
 * 
 * This program is licensed and may be used, modified and redistributed under 
 * the terms of the European Public License (EUPL), either version 1.1 or (at 
 * your option) any later version as soon as they are approved by the European 
 * Commission.
 * 
 * Alternatively, you may redistribute and/or modify this program under the 
 * terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either  version 3 of the License, or (at your option) 
 * any later version. 
 *   
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *   
 * See the licenses for the specific language governing permissions, limitations 
 * and more details.
 *   
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along 
 * with this program; if not, you may find them at: 
 *   
 *   https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 *   http://www.gnu.org/licenses/ 
 *   and 
 *   https://www.gnu.org/licenses/lgpl.txt
 */
package org.brain4it.manager.swing;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import static javax.swing.ListSelectionModel.SINGLE_SELECTION;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import org.brain4it.lang.BList;
import org.brain4it.lang.Utils;
import org.brain4it.manager.swing.DesignerPanel.WidgetView;
import org.brain4it.manager.swing.table.BooleanCellEditor;
import org.brain4it.manager.swing.table.FunctionCellEditor;
import org.brain4it.manager.swing.table.NumberCellEditor;
import org.brain4it.manager.swing.table.StringCellEditor;
import org.brain4it.manager.widgets.WidgetProperty;
import org.brain4it.manager.widgets.WidgetType;

/**
 *
 * @author realor
 */
public class DashboardWidgetEditor extends javax.swing.JPanel
{  
  private WidgetView widgetView;
 
  /**
   * Creates new form PropertiesPanel
   */
  public DashboardWidgetEditor()
  {
    initComponents();
    initWidgetEditorPanel();
  }
  
  public ManagerApp getManagerApp()
  {
    return (ManagerApp)SwingUtilities.getWindowAncestor(this);
  }
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    splitPane = new JSplitPaneZero();
    propertiesScrollPane = new javax.swing.JScrollPane();
    propertiesTable = new PropertiesTable();
    helpPanel = new javax.swing.JPanel();
    helpHeaderPanel = new javax.swing.JPanel();
    propertyLabel = new javax.swing.JLabel();
    iconLabel = new javax.swing.JLabel();
    helpScrollPane = new javax.swing.JScrollPane();
    helpLabel = new HelpLabel();

    setLayout(new java.awt.BorderLayout());

    splitPane.setBorder(null);
    splitPane.setDividerLocation(10000);
    splitPane.setDividerSize(0);
    splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    splitPane.setResizeWeight(1.0);

    propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][]
      {

      },
      new String []
      {
        "Property", "Value"
      }
    )
    {
      Class[] types = new Class []
      {
        java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean []
      {
        false, true
      };

      public Class getColumnClass(int columnIndex)
      {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex)
      {
        return canEdit [columnIndex];
      }
    });
    propertiesScrollPane.setViewportView(propertiesTable);

    splitPane.setLeftComponent(propertiesScrollPane);

    helpPanel.setLayout(new java.awt.BorderLayout());

    helpHeaderPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
    helpHeaderPanel.setLayout(new java.awt.BorderLayout());

    propertyLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    helpHeaderPanel.add(propertyLabel, java.awt.BorderLayout.CENTER);

    iconLabel.setIcon(IconCache.getIcon("help"));
    helpHeaderPanel.add(iconLabel, java.awt.BorderLayout.EAST);

    helpPanel.add(helpHeaderPanel, java.awt.BorderLayout.PAGE_START);

    helpScrollPane.setBackground(new java.awt.Color(204, 204, 204));

    helpLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
    helpScrollPane.setViewportView(helpLabel);

    helpPanel.add(helpScrollPane, java.awt.BorderLayout.CENTER);

    splitPane.setRightComponent(helpPanel);

    add(splitPane, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel helpHeaderPanel;
  private javax.swing.JLabel helpLabel;
  private javax.swing.JPanel helpPanel;
  private javax.swing.JScrollPane helpScrollPane;
  private javax.swing.JLabel iconLabel;
  private javax.swing.JScrollPane propertiesScrollPane;
  private javax.swing.JTable propertiesTable;
  private javax.swing.JLabel propertyLabel;
  private javax.swing.JSplitPane splitPane;
  // End of variables declaration//GEN-END:variables

  private void initWidgetEditorPanel()
  {
    int scalingFactor = ManagerApp.getPreferences().getScalingFactor();
    propertiesTable.setRowHeight(20 * scalingFactor);
    propertiesTable.getSelectionModel().setSelectionMode(SINGLE_SELECTION);
    propertiesTable.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).
      put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");    
    propertiesTable.getActionMap().put("Enter", new AbstractAction() 
    {
      @Override
      public void actionPerformed(ActionEvent ae) 
      {
        if (propertiesTable.isEditing())
        {
          try
          {
            propertiesTable.editingStopped(new ChangeEvent(this));
          }
          catch (Exception ex)
          {
            // ignore
          }
        }
        else
        {
          int selectedRow = propertiesTable.getSelectedRow();
          propertiesTable.editCellAt(selectedRow, 1);
        }
      }
    });

    propertyLabel.setFont(propertyLabel.getFont().deriveFont(Font.BOLD));
    helpHeaderPanel.setVisible(false);
    
    this.propertiesTable.getSelectionModel().addListSelectionListener(
      new ListSelectionListener()
    {
      @Override
      public void valueChanged(ListSelectionEvent e)
      {
        int row = propertiesTable.getSelectedRow();
        if (row != -1)
        {
          String property = 
            (String)propertiesTable.getModel().getValueAt(row, 0);
          String description = widgetView.getWidgetType().
            getDescription(property, Locale.getDefault());
          if (description == null) description = "property " + property;
          propertyLabel.setText(property);
          helpHeaderPanel.setVisible(true);
          helpLabel.setText("<html>" + description + "</html>");
        }
        else
        {
          helpHeaderPanel.setVisible(false);
          propertyLabel.setText(null);
          helpLabel.setText(null);
        }
      }
    });
  }
  
  public WidgetView getWidgetView()
  {
    return widgetView;
  }

  public void setWidgetView(WidgetView widgetView)
  {
    if (widgetView != this.widgetView)
    {
      this.widgetView = widgetView;
      listToTable();
      if (helpPanel.getHeight() < 100)
      {
        splitPane.setDividerLocation(0.7);
      }
      ResourceBundle bundle = ResourceBundle.getBundle(
        "org/brain4it/manager/widgets/resources/Widgets");
      if (widgetView != null)
      {
        String typeName = widgetView.getWidgetType().getWidgetType();
        helpHeaderPanel.setVisible(true);
        propertyLabel.setText(typeName);
        try
        {
          helpLabel.setText("<html>" + bundle.getString(typeName) + "</html>");
        }
        catch (MissingResourceException ex)
        {
          helpLabel.setText(null);                  
        }
      }
      else
      {
        propertyLabel.setText(null);
        helpLabel.setText(null);        
      }
    }
  }
  
  private void listToTable()
  {
    ResourceBundle bundle = ResourceBundle.getBundle(
      "org/brain4it/manager/swing/resources/Manager");
    DefaultTableModel model = new DefaultTableModel()
    {
      @Override
      public boolean isCellEditable(int row, int column)
      {
        return column == 1;
      }      
    };
    model.addColumn("Property");
    model.addColumn("Value");

    propertiesTable.getTableHeader().setReorderingAllowed(false);
    propertiesTable.setModel(model);
    propertiesTable.getColumnModel().getColumn(0).
      setHeaderValue(bundle.getString("Designer.property"));
    propertiesTable.getColumnModel().getColumn(1).
      setHeaderValue(bundle.getString("Designer.value"));

    if (widgetView != null)
    {
      WidgetType widgetType = widgetView.getWidgetType();
      BList properties = widgetView.getProperties();
      widgetType.init(properties);

      for (int i = 0; i < properties.size(); i++)
      {
        String parameterName = properties.getName(i);
        if (!parameterName.equals(WidgetType.TYPE))
        {
          Object value = properties.get(i);
          model.addRow(new Object[]{parameterName, value});
        }
      }
    }
    model.addTableModelListener(new TableModelListener()
    {
      @Override
      public void tableChanged(TableModelEvent e)
      {
        int row = e.getFirstRow();
        String propertyName = (String)propertiesTable.getValueAt(row, 0);
        Object propertyValue = propertiesTable.getValueAt(row, 1);
        BList properties = widgetView.getProperties();
        Object oldPropertyValue = properties.get(propertyName);
        if (!Utils.exactEquals(propertyValue, oldPropertyValue))
        {
          properties.put(propertyName, propertyValue);
          try
          {
            widgetView.setProperties(properties);
          }
          catch (Exception ex)
          {
            // restore previous value
            properties.put(propertyName, oldPropertyValue);
            propertiesTable.setValueAt(oldPropertyValue, row, 1);
            // show error
            widgetView.getDesignerPanel().getManagerApp().showError("ERROR", ex);
          }
        }
      }
    });    
  }
  
  class PropertiesTable extends JTable
  {
    StringCellRenderer stringCellRenderer = new StringCellRenderer();
    BooleanCellEditor booleanCellEditor = new BooleanCellEditor();
    NumberCellEditor numberCellEditor = new NumberCellEditor();
    StringCellEditor stringCellEditor = new StringCellEditor();
    FunctionCellEditor functionCellEditor = 
      new FunctionCellEditor(DashboardWidgetEditor.this);

    @Override
    public TableCellRenderer getCellRenderer(int row, int column)
    {
      return stringCellRenderer;
    }    
    
    @Override
    public TableCellEditor getCellEditor(int row, int column)
    {
      TableCellEditor tableCellEditor = null;
      String propertyName = (String)getModel().getValueAt(row, 0);
      WidgetProperty property = 
        widgetView.getWidgetType().getProperty(propertyName);
      if (property.isFunction())
      {
        tableCellEditor = functionCellEditor;
      }
      else
      {
        String type = property.getType();
        switch (type)
        {
          case WidgetProperty.BOOLEAN:
            tableCellEditor = booleanCellEditor;
            break;
          case WidgetProperty.NUMBER:
            tableCellEditor = numberCellEditor;
            break;
          case WidgetProperty.STRING:
            tableCellEditor = stringCellEditor;
            break;
        }
      }
      return tableCellEditor;
    }    
  }
  
  public class StringCellRenderer extends DefaultTableCellRenderer
  {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, 
      boolean isSelected, boolean hasFocus, int row, int column)
    {
      String valueString = value == null ? null : value.toString();
      return super.getTableCellRendererComponent(table, valueString, 
        isSelected, hasFocus, row, column);
    }
  };

  public class HelpLabel extends JLabel implements Scrollable
  {
    @Override
    public Dimension getPreferredScrollableViewportSize()
    {
      return getPreferredSize();
    }

    @Override
    public int getScrollableUnitIncrement(Rectangle visibleRect, 
      int orientation, int direction)
    {
      return 1;
    }

    @Override
    public int getScrollableBlockIncrement(Rectangle visibleRect, 
      int orientation, int direction)
    {
      return getFont().getSize();
    }

    @Override
    public boolean getScrollableTracksViewportWidth()
    {
      return true;
    }

    @Override
    public boolean getScrollableTracksViewportHeight()
    {
      return false;
    }
  }
}
