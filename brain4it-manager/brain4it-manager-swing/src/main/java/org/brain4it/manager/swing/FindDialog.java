/*
 * Brain4it
 * 
 * Copyright (C) 2018, Ajuntament de Sant Feliu de Llobregat
 * 
 * This program is licensed and may be used, modified and redistributed under 
 * the terms of the European Public License (EUPL), either version 1.1 or (at 
 * your option) any later version as soon as they are approved by the European 
 * Commission.
 * 
 * Alternatively, you may redistribute and/or modify this program under the 
 * terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either  version 3 of the License, or (at your option) 
 * any later version. 
 *   
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *   
 * See the licenses for the specific language governing permissions, limitations 
 * and more details.
 *   
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along 
 * with this program; if not, you may find them at: 
 *   
 *   https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 *   http://www.gnu.org/licenses/ 
 *   and 
 *   https://www.gnu.org/licenses/lgpl.txt
 */
package org.brain4it.manager.swing;

import java.awt.Component;
import java.awt.Rectangle;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import org.brain4it.manager.swing.splitter.TabContainer;

/**
 *
 * @author realor
 */
public class FindDialog extends javax.swing.JDialog
{
  private final ManagerApp managerApp;

  public FindDialog(ManagerApp managerApp)
  {
    super(managerApp, false);
    this.managerApp = managerApp;
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    centerPanel = new javax.swing.JPanel();
    findLabel = new javax.swing.JLabel();
    findTextField = new javax.swing.JTextField();
    replaceByLabel = new javax.swing.JLabel();
    replaceByTextField = new javax.swing.JTextField();
    southPanel = new javax.swing.JPanel();
    previousButton = new javax.swing.JButton();
    nextButton = new javax.swing.JButton();
    replaceButton = new javax.swing.JButton();
    replaceAllButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/brain4it/manager/swing/resources/Manager"); // NOI18N
    setTitle(bundle.getString("FindDialog")); // NOI18N

    findLabel.setText(bundle.getString("FindDialog.find")); // NOI18N

    findTextField.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        findTextFieldActionPerformed(evt);
      }
    });

    replaceByLabel.setText(bundle.getString("FindDialog.replaceBy")); // NOI18N

    replaceByTextField.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        replaceByTextFieldActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout centerPanelLayout = new javax.swing.GroupLayout(centerPanel);
    centerPanel.setLayout(centerPanelLayout);
    centerPanelLayout.setHorizontalGroup(
      centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(centerPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(replaceByLabel)
          .addComponent(findLabel))
        .addGap(14, 14, 14)
        .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(findTextField)
          .addComponent(replaceByTextField))
        .addContainerGap())
    );
    centerPanelLayout.setVerticalGroup(
      centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(centerPanelLayout.createSequentialGroup()
        .addGap(10, 10, 10)
        .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(findLabel)
          .addComponent(findTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(replaceByLabel)
          .addComponent(replaceByTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

    previousButton.setIcon(IconCache.getIcon("previous"));
    previousButton.setText(bundle.getString("FindDialog.previous")); // NOI18N
    previousButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        previousButtonActionPerformed(evt);
      }
    });
    southPanel.add(previousButton);

    nextButton.setIcon(IconCache.getIcon("next"));
    nextButton.setText(bundle.getString("FindDialog.next")); // NOI18N
    nextButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        nextButtonActionPerformed(evt);
      }
    });
    southPanel.add(nextButton);

    replaceButton.setIcon(IconCache.getIcon("replace"));
    replaceButton.setText(bundle.getString("FindDialog.replace")); // NOI18N
    replaceButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        replaceButtonActionPerformed(evt);
      }
    });
    southPanel.add(replaceButton);

    replaceAllButton.setIcon(IconCache.getIcon("replace")
    );
    replaceAllButton.setText(bundle.getString("FindDialog.replaceAll")); // NOI18N
    replaceAllButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        replaceAllButtonActionPerformed(evt);
      }
    });
    southPanel.add(replaceAllButton);

    cancelButton.setIcon(IconCache.getIcon("cancel"));
    cancelButton.setText(bundle.getString("FindDialog.cancel")); // NOI18N
    cancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelButtonActionPerformed(evt);
      }
    });
    southPanel.add(cancelButton);

    getContentPane().add(southPanel, java.awt.BorderLayout.SOUTH);
  }// </editor-fold>//GEN-END:initComponents

  private void findTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_findTextFieldActionPerformed
  {//GEN-HEADEREND:event_findTextFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_findTextFieldActionPerformed

  private void replaceByTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_replaceByTextFieldActionPerformed
  {//GEN-HEADEREND:event_replaceByTextFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_replaceByTextFieldActionPerformed

  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextButtonActionPerformed
  {//GEN-HEADEREND:event_nextButtonActionPerformed
    JTextPane textPane = getTextPane();
    if (textPane != null)
    {
      textPane.requestFocus();
      String textToFind = findTextField.getText();
      findText(textPane, textToFind, true);
    }
  }//GEN-LAST:event_nextButtonActionPerformed

  private void previousButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previousButtonActionPerformed
  {//GEN-HEADEREND:event_previousButtonActionPerformed
    JTextPane textPane = getTextPane();
    if (textPane != null)
    {
      textPane.requestFocus();
      String textToFind = findTextField.getText();
      findText(textPane, textToFind, false);
    }
  }//GEN-LAST:event_previousButtonActionPerformed

  private void replaceButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_replaceButtonActionPerformed
  {//GEN-HEADEREND:event_replaceButtonActionPerformed
    JTextPane textPane = getTextPane();
    if (textPane != null)
    {
      textPane.requestFocus();
      String textToFind = findTextField.getText();
      String textToReplace = replaceByTextField.getText();
      if (textToFind.equals(textPane.getSelectedText()))
      {
        try
        {
          int offset = textPane.getSelectionStart();
          textPane.getDocument().remove(offset, textToFind.length());
          textPane.getDocument().insertString(offset, textToReplace, null);
          findText(textPane, textToFind, true);
        }
        catch (BadLocationException ex)
        {
        }
      }
    }
  }//GEN-LAST:event_replaceButtonActionPerformed

  private void replaceAllButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_replaceAllButtonActionPerformed
  {//GEN-HEADEREND:event_replaceAllButtonActionPerformed
    final JTextPane textPane = getTextPane();
    if (textPane != null)
    {
      String text = textPane.getText();
      final String textToFind = findTextField.getText();
      String textToReplace = replaceByTextField.getText();
      final int pos = text.indexOf(textToFind);
      if (pos != -1)
      {
        textPane.setText(text.replace(textToFind, textToReplace));
        SwingUtilities.invokeLater(new Runnable()
        {
          @Override
          public void run()
          {
            try
            {
              Rectangle rect = textPane.modelToView(pos);
              rect.union(textPane.modelToView(pos + textToFind.length()));
              rect.grow(100, 100);
              textPane.scrollRectToVisible(rect);
            }
            catch (BadLocationException ex)
            {
              // ignore
            }
          }
        });
      }
    }
  }//GEN-LAST:event_replaceAllButtonActionPerformed

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
  {//GEN-HEADEREND:event_cancelButtonActionPerformed
    setVisible(false);
  }//GEN-LAST:event_cancelButtonActionPerformed

  private JTextPane getTextPane()
  {
    TabContainer container = managerApp.getSplitter().getActiveTabContainer();
    Component component = container.getSelectedComponent();
    if (component instanceof EditorPanel)
    {
      EditorPanel editorPanel = (EditorPanel)component;
      return editorPanel.getInputTextPane();
    }  
    return null;
  }
  
  private boolean findText(JTextPane textPane, String textToFind, 
    boolean forward)
  {
    try
    {
      String fragment;
      int index;
      if (forward)
      {
        fragment = textPane.getText(textPane.getSelectionEnd(),
          textPane.getDocument().getLength() - textPane.getSelectionEnd());
        index = fragment.indexOf(textToFind);
        if (index == -1) // look for all document
        {
          fragment = textPane.getText(); 
          index = fragment.indexOf(textToFind);        
        }
        else
        {
          index += textPane.getSelectionEnd();
        }
      }
      else
      {
        fragment = textPane.getText(0, textPane.getSelectionStart()); 
        index = fragment.lastIndexOf(textToFind);
        if (index == -1) // look for all document
        {
          fragment = textPane.getText(); 
          index = fragment.lastIndexOf(textToFind);        
        }
      }
      if (index != -1)
      {
        textPane.setSelectionStart(index);
        textPane.setSelectionEnd(index + textToFind.length());
        scrollToSelection(textPane);
        return true;
      }
    }
    catch (BadLocationException ex)
    {
    }
    return false;
  }

  private void scrollToSelection(JTextPane textPane)
  {
    try
    {
      int start = textPane.getSelectionStart();
      int end = textPane.getSelectionEnd();
      Rectangle rect = textPane.modelToView(start);
      rect.union(textPane.modelToView(end));
      rect.grow(100, 100);
      textPane.scrollRectToVisible(rect);
    }
    catch (BadLocationException ex)
    {
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private javax.swing.JPanel centerPanel;
  private javax.swing.JLabel findLabel;
  private javax.swing.JTextField findTextField;
  private javax.swing.JButton nextButton;
  private javax.swing.JButton previousButton;
  private javax.swing.JButton replaceAllButton;
  private javax.swing.JButton replaceButton;
  private javax.swing.JLabel replaceByLabel;
  private javax.swing.JTextField replaceByTextField;
  private javax.swing.JPanel southPanel;
  // End of variables declaration//GEN-END:variables
}
